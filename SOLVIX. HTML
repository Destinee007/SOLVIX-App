 
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=0.7">
    
    <meta name="mobile-web-app-capable" content="yes">
<meta name="apple-mobile-web-app-capable" content="yes">
<meta name="apple-mobile-web-app-status-bar-style" content="black-translucent">
    
    
    <title>SOLVIX - Advanced Mathematics Solver</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <script src="https://cdn.jsdelivr.net/npm/mathjs@11.8.0/lib/browser/math.js"></script>
    <script src="https://cdn.plot.ly/plotly-2.24.1.min.js" charset="utf-8"></script>
    <style>
        :root {
            --primary: #6a11cb;
            --secondary: #2575fc;
            --accent: #ff4d94;
            --dark: #121212;
            --darker: #0a0a0a;
            --light: #f8f9fa;
            --success: #00c851;
            --warning: #ffbb33;
            --danger: #ff4444;
            --card-bg: rgba(30, 30, 40, 0.8);
            --card-border: rgba(100, 100, 255, 0.2);
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }

        body {
            background: linear-gradient(135deg, var(--darker), var(--dark));
            color: var(--light);
            min-height: 100vh;
            overflow-x: hidden;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }

        /* Loading Screen */
        #loading-screen {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: linear-gradient(135deg, var(--darker), var(--dark));
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            z-index: 9999;
            transition: opacity 0.5s ease;
        }

        .logo {
            display: flex;
            flex-direction: column;
            align-items: center;
            margin-bottom: 30px;
        }

        .logo-icon {
            font-size: 5rem;
            color: var(--accent);
            margin-bottom: 15px;
            text-shadow: 0 0 20px rgba(255, 77, 148, 0.7);
            animation: pulse 2s infinite;
        }

        @keyframes pulse {
            0% { transform: scale(1); }
            50% { transform: scale(1.05); }
            100% { transform: scale(1); }
        }

        .logo-text {
            font-size: 3.5rem;
            font-weight: 800;
            background: linear-gradient(to right, var(--accent), var(--secondary));
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            text-shadow: 0 0 15px rgba(106, 17, 203, 0.5);
        }

        .loading-bar {
            width: 300px;
            height: 6px;
            background: rgba(255, 255, 255, 0.1);
            border-radius: 10px;
            overflow: hidden;
            margin-top: 20px;
        }

        .loading-progress {
            height: 100%;
            width: 0%;
            background: linear-gradient(to right, var(--primary), var(--accent));
            border-radius: 10px;
            transition: width 0.3s ease;
        }

        /* Main App */
        #app {
            display: none;
            opacity: 0;
            transition: opacity 0.3s ease;
        }

        header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 20px 0;
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
            margin-bottom: 20px;
            padding-left: 86px;
        }

        .header-logo {
            display: flex;
            align-items: center;
        }

        .header-logo .logo-icon {
            font-size: 2.5rem;
            margin-right: 10px;
        }

        .header-logo .logo-text {
            font-size: 2rem;
        }

        .header-controls {
            display: flex;
            gap: 10px;
        }

        .header-btn {
            background: rgba(255, 255, 255, 0.1);
            border: none;
            color: white;
            width: 40px;
            height: 40px;
            border-radius: 50%;
            display: flex;
            justify-content: center;
            align-items: center;
            cursor: pointer;
            transition: all 0.3s ease;
            margin-right: 80px;
        }

        .header-btn:hover {
            background: rgba(255, 255, 255, 0.2);
        }

        /* Main Menu */
        .main-menu {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
            gap: 20px;
            margin-top: 30px;
        }

        .menu-card {
            background: var(--card-bg);
            border-radius: 20px;
            padding: 25px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
            border: 1px solid var(--card-border);
            cursor: pointer;
            transition: all 0.3s ease;
            display: flex;
            flex-direction: column;
            align-items: center;
            text-align: center;
            min-height: 200px;
            justify-content: center;
        }

        .menu-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 15px 30px rgba(0, 0, 0, 0.4);
            border-color: var(--primary);
        }

        .menu-card-icon {
            font-size: 3rem;
            color: var(--accent);
            margin-bottom: 15px;
        }

        .menu-card-title {
            font-size: 1.5rem;
            margin-bottom: 10px;
            color: var(--light);
        }

        .menu-card-desc {
            color: rgba(255, 255, 255, 0.7);
            font-size: 0.9rem;
        }

        /* Operation Screen */
        .operation-screen {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: var(--darker);
            z-index: 100;
            overflow-y: auto;
            padding: 20px;
        }

        .operation-screen.active {
            display: block;
        }

        .operation-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
            padding-bottom: 15px;
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
        }

        .operation-title {
            font-size: 1.8rem;
            color: var(--accent);
        }

        .back-btn {
            background: rgba(255, 255, 255, 0.1);
            border: none;
            color: white;
            padding: 10px 20px;
            border-radius: 10px;
            cursor: pointer;
            display: flex;
            align-items: center;
            gap: 8px;
            transition: all 0.3s ease;
        }

        .back-btn:hover {
            background: rgba(255, 255, 255, 0.2);
        }

        /* Calculator Display */
        .calculator-display {
            background: var(--card-bg);
            border-radius: 20px;
            padding: 25px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
            border: 1px solid var(--card-border);
            margin-bottom: 30px;
        }

        .formula-bar {
            background: rgba(0, 0, 0, 0.3);
            border-radius: 10px;
            padding: 15px;
            margin-bottom: 15px;
            font-family: 'Courier New', monospace;
            font-size: 1.2rem;
            min-height: 60px;
            display: flex;
            align-items: center;
            border: 1px solid rgba(255, 255, 255, 0.1);
        }

        .calculator-controls {
            display: flex;
            justify-content: space-between;
            margin-bottom: 20px;
        }

        .calc-btn {
            background: linear-gradient(to right, var(--primary), var(--secondary));
            border: none;
            color: white;
            padding: 12px 25px;
            border-radius: 10px;
            cursor: pointer;
            font-weight: 600;
            transition: all 0.3s ease;
            flex: 1;
            margin: 0 5px;
        }

        .calc-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(37, 117, 252, 0.4);
        }

        .calc-btn.clear {
            background: rgba(255, 68, 68, 0.7);
        }

        .calc-btn.clear:hover {
            background: rgba(255, 68, 68, 0.9);
        }

        /* Enhanced Calculator Grid */
        .calculator-grid {
            display: grid;
            grid-template-columns: repeat(6, 1fr);
            gap: 10px;
            margin-top: 20px;
        }

        .calc-key {
            background: rgba(255, 255, 255, 0.1);
            border: none;
            color: white;
            padding: 15px 0;
            border-radius: 8px;
            cursor: pointer;
            font-size: 1.1rem;
            transition: all 0.2s ease;
        }

        .calc-key:hover {
            background: rgba(255, 255, 255, 0.2);
        }

        .calc-key.function {
            background: rgba(106, 17, 203, 0.3);
        }

        .calc-key.function:hover {
            background: rgba(106, 17, 203, 0.5);
        }

        .calc-key.operator {
            background: rgba(37, 117, 252, 0.3);
        }

        .calc-key.operator:hover {
            background: rgba(37, 117, 252, 0.5);
        }

        .calc-key.equals {
            background: linear-gradient(to right, var(--primary), var(--secondary));
        }

        .calc-key.equals:hover {
            background: linear-gradient(to right, var(--primary), var(--secondary));
            filter: brightness(1.2);
        }

        /* Result Display */
        .result-display {
            background: rgba(0, 0, 0, 0.3);
            border-radius: 15px;
            padding: 20px;
            min-height: 150px;
            margin-top: 20px;
            font-family: 'Courier New', monospace;
            font-size: 1.2rem;
            overflow-y: auto;
            max-height: 300px;
        }

        /* Matrix Section */
        .matrix-section {
            background: var(--card-bg);
            border-radius: 20px;
            padding: 25px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
            border: 1px solid var(--card-border);
            margin-top: 30px;
        }

        .matrix-container {
            width: 100%;
            background: rgba(0, 0, 0, 0.3);
            border-radius: 15px;
            margin-top: 20px;
            padding: 20px;
            display: flex;
            justify-content: center;
            align-items: center;
            color: rgba(255, 255, 255, 0.5);
        }

        /* Equation System */
        .equation-system {
            margin-top: 20px;
        }

        .equation-row {
            display: flex;
            align-items: center;
            margin-bottom: 10px;
        }

        .equation-input-field {
            flex: 1;
            padding: 10px;
            background: rgba(0, 0, 0, 0.3);
            border: 1px solid rgba(255, 255, 255, 0.1);
            border-radius: 5px;
            color: white;
            margin: 0 5px;
        }

        .add-equation-row {
            display: flex;
            justify-content: center;
            margin-top: 10px;
        }

        /* Matrix Solver */
        .matrix-solver {
            margin-top: 20px;
        }

        .matrix-input {
            display: grid;
            gap: 10px;
            margin: 15px 0;
        }

        .matrix-row {
            display: flex;
            gap: 10px;
            justify-content: center;
        }

        .matrix-cell {
            width: 60px;
            padding: 8px;
            background: rgba(0, 0, 0, 0.3);
            border: 1px solid rgba(255, 255, 255, 0.1);
            border-radius: 5px;
            color: white;
            text-align: center;
        }

        .matrix-braces {
            display: flex;
            align-items: center;
            font-size: 2rem;
            margin: 0 10px;
        }

        /* Menu Panel */
        .menu-panel {
            position: fixed;
            top: 0;
            right: -400px;
            width: 350px;
            height: 100%;
            background: var(--card-bg);
            box-shadow: -5px 0 15px rgba(0, 0, 0, 0.3);
            z-index: 1000;
            transition: right 0.3s ease;
            padding: 20px;
            overflow-y: auto;
        }

        .menu-panel.active {
            right: 0;
        }

        .menu-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
            padding-bottom: 15px;
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
        }

        .menu-title {
            font-size: 1.5rem;
            color: var(--accent);
        }

        .close-menu {
            background: none;
            border: none;
            color: white;
            font-size: 1.5rem;
            cursor: pointer;
        }

        .menu-section {
            margin-bottom: 25px;
        }

        .menu-section-title {
            font-size: 1.2rem;
            margin-bottom: 15px;
            color: var(--accent);
        }

        .menu-list {
            list-style: none;
        }

        .menu-item {
            padding: 12px 15px;
            margin-bottom: 8px;
            border-radius: 10px;
            cursor: pointer;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .menu-item:hover {
            background: rgba(255, 255, 255, 0.1);
        }

        /* Info Panel */
        .info-panel {
            position: fixed;
            top: 0;
            left: -400px;
            width: 350px;
            height: 100%;
            background: var(--card-bg);
            box-shadow: 5px 0 15px rgba(0, 0, 0, 0.3);
            z-index: 1000;
            transition: left 0.3s ease;
            padding: 20px;
            overflow-y: auto;
        }

        .info-panel.active {
            left: 0;
        }

        .info-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
            padding-bottom: 15px;
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
        }

        .info-title {
            font-size: 1.5rem;
            color: var(--accent);
        }

        .close-info {
            background: none;
            border: none;
            color: white;
            font-size: 1.5rem;
            cursor: pointer;
        }

        .info-content {
            line-height: 1.6;
        }

        .info-step {
            margin-bottom: 20px;
            padding-bottom: 15px;
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
        }

        .info-step-title {
            font-size: 1.2rem;
            margin-bottom: 10px;
            color: var(--accent);
        }

        .info-step-desc {
            color: rgba(255, 255, 255, 0.8);
        }

        /* Overlay */
        .overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.5);
            z-index: 999;
            display: none;
        }

        .overlay.active {
            display: block;
        }

        /* Base Converter Window */
        .base-converter-window {
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            width: 90%;
            max-width: 600px;
            background: var(--card-bg);
            border-radius: 20px;
            padding: 25px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.5);
            border: 1px solid var(--card-border);
            z-index: 1001;
            display: none;
        }

        .base-converter-window.active {
            display: block;
        }

        .base-converter-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
            padding-bottom: 15px;
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
        }

        .base-converter-title {
            font-size: 1.5rem;
            color: var(--accent);
        }

        .close-base-converter {
            background: none;
            border: none;
            color: white;
            font-size: 1.5rem;
            cursor: pointer;
        }

        .base-input-section {
            margin-bottom: 20px;
        }

        .base-input-row {
            display: flex;
            align-items: center;
            margin-bottom: 15px;
        }

        .base-input-label {
            width: 120px;
            font-weight: bold;
        }

        .base-input-field {
            flex: 1;
            padding: 10px;
            background: rgba(0, 0, 0, 0.3);
            border: 1px solid rgba(255, 255, 255, 0.1);
            border-radius: 5px;
            color: white;
        }

        .base-convert-btn {
            background: linear-gradient(to right, var(--primary), var(--secondary));
            border: none;
            color: white;
            padding: 12px 25px;
            border-radius: 10px;
            cursor: pointer;
            font-weight: 600;
            transition: all 0.3s ease;
            width: 100%;
            margin-top: 10px;
        }

        .base-convert-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(37, 117, 252, 0.4);
        }

        .base-results {
            margin-top: 20px;
            background: rgba(0, 0, 0, 0.3);
            border-radius: 10px;
            padding: 15px;
        }

        .base-result-row {
            display: flex;
            margin-bottom: 10px;
            padding-bottom: 10px;
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
        }

        .base-result-label {
            width: 120px;
            font-weight: bold;
        }

        .base-result-value {
            flex: 1;
            font-family: 'Courier New', monospace;
        }

        /* Developer Info */
        .developer-info {
            text-align: center;
            margin-top: 40px;
            padding-top: 20px;
            border-top: 1px solid rgba(255, 255, 255, 0.1);
            color: rgba(255, 255, 255, 0.7);
            font-size: 0.9rem;
        }

        .developer-name {
            font-weight: bold;
            color: var(--accent);
        }

        /* Input Fields */
        .input-field {
            width: 100%;
            padding: 12px;
            background: rgba(0, 0, 0, 0.3);
            border: 1px solid rgba(255, 255, 255, 0.1);
            border-radius: 10px;
            color: white;
            margin-bottom: 15px;
        }

        /* Operation Selector */
        .operation-selector {
            display: flex;
            gap: 15px;
            margin-bottom: 20px;
        }

        .operation-select {
            flex: 1;
            padding: 12px;
            background: rgba(0, 0, 0, 0.3);
            border: 1px solid rgba(255, 255, 255, 0.1);
            border-radius: 10px;
            color: white;
            font-size: 1rem;
        }

        /* Responsive Design */
        @media (max-width: 768px) {
            .header-logo .logo-text {
                font-size: 1.5rem;
            }
            
            .calculator-grid {
                grid-template-columns: repeat(4, 1fr);
            }
            
            .menu-panel, .info-panel {
                width: 100%;
                right: -100%;
            }
            
            .menu-panel.active {
                right: 0;
            }
            
            .info-panel {
                left: -100%;
            }
            
            .info-panel.active {
                left: 0;
            }
            
            .base-converter-window {
                width: 95%;
                padding: 15px;
            }
            
            .main-menu {
                grid-template-columns: 1fr;
            }
        }

        /* Animations */
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(20px); }
            to { opacity: 1; transform: translateY(0); }
        }

        .fade-in {
            animation: fadeIn 0.5s ease forwards;
        }
    </style>
</head>
<body>
    <!-- Loading Screen -->
    <div id="loading-screen">
        <div class="logo">
            <div class="logo-icon">
                <i class="fas fa-infinity"></i>
            </div>
            <div class="logo-text">SOLVIX</div>
        </div>
        <p>Initializing advanced mathematics solver...</p>
        <div class="loading-bar">
            <div class="loading-progress" id="loading-progress"></div>
        </div>
    </div>

    <!-- Main App -->
    <div id="app">
        <header>
            <div class="header-logo">
                <div class="logo-icon">
                    <i class="fas fa-infinity"></i>
                </div>
                <div class="logo-text">SOLVIX</div>
            </div>
            <div class="header-controls">
                <button class="header-btn" id="info-btn"
                style="margin-right: 27px;">
                    <i class="fas fa-info"></i>
                </button>
                <button class="header-btn" id="menu-btn">
                    <i class="fas fa-bars"></i>
                </button>
            </div>
        </header>

        <div class="container">
            <h2 style="text-align: center; margin-bottom: 20px; color: var(--accent);">Select a Mathematical Operation</h2>
            
            <!-- Main Menu -->
            <div class="main-menu">
                <div class="menu-card" data-operation="basic">
                    <div class="menu-card-icon">
                        <i class="fas fa-calculator"></i>
                    </div>
                    <div class="menu-card-title">Scientific Calculator</div>
                    <div class="menu-card-desc">Perform basic and scientific calculations with full keypad</div>
                </div>
                
                <div class="menu-card" data-operation="algebra">
                    <div class="menu-card-icon">
                        <i class="fas fa-superscript"></i>
                    </div>
                    <div class="menu-card-title">Algebraic Equations</div>
                    <div class="menu-card-desc">Solve linear, quadratic, cubic and other algebraic equations</div>
                </div>
                
                <div class="menu-card" data-operation="system">
                    <div class="menu-card-icon">
                        <i class="fas fa-project-diagram"></i>
                    </div>
                    <div class="menu-card-title">Equation Systems</div>
                    <div class="menu-card-desc">Solve systems of equations with multiple variables</div>
                </div>
                
                <div class="menu-card" data-operation="polynomial">
                    <div class="menu-card-icon">
                        <i class="fas fa-function"></i>
                    </div>
                    <div class="menu-card-title">Polynomial Equations</div>
                    <div class="menu-card-desc">Solve quadratic and higher-order polynomial equations</div>
                </div>
                
                <div class="menu-card" data-operation="matrix">
                    <div class="menu-card-icon">
                        <i class="fas fa-th"></i>
                    </div>
                    <div class="menu-card-title">Matrix Operations</div>
                    <div class="menu-card-desc">Perform matrix operations including determinants and inverses</div>
                </div>
                
                <div class="menu-card" data-operation="calculus">
                    <div class="menu-card-icon">
                        <i class="fas fa-chart-line"></i>
                    </div>
                    <div class="menu-card-title">Calculus</div>
                    <div class="menu-card-desc">Differentiation, integration and limit calculations</div>
                </div>
                
                <div class="menu-card" data-operation="base-converter">
                    <div class="menu-card-icon">
                        <i class="fas fa-exchange-alt"></i>
                    </div>
                    <div class="menu-card-title">Base Converter</div>
                    <div class="menu-card-desc">Convert numbers between different bases</div>
                </div>
            </div>
            
            <!-- Developer Info -->
            <div class="developer-info">
                <p>Developed by <span class="developer-name">Omale Destiny Unekuojo (Elder Destinée)</span></p>
                <p>Email: <a href="mailto:omaledestiny007@gmail.com" style="color: var(--accent);">omaledestiny007@gmail.com</a></p>
                <p>For support, partnership and complaints</p>
            </div>
        </div>

        <!-- Operation Screens -->
        <!-- Basic Calculator Screen -->
        <div class="operation-screen" id="basic-calculator-screen">
            <div class="operation-header">
                <div class="operation-title">Scientific Calculator</div>
                <button class="back-btn" data-back="main">
                    <i class="fas fa-arrow-left"></i> Back to Main
                </button>
            </div>
            
            <div class="calculator-display">
                <div class="formula-bar" id="formula-bar">0</div>

                <div class="calculator-controls">
                    <button class="calc-btn clear" id="clear-btn">CLEAR</button>
                    <button class="calc-btn" id="solve-btn">SOLVE</button>
                </div>

                <div class="calculator-grid" id="calculator-grid">
                    <button class="calc-key function" data-value="sin(">sin</button>
                    <button class="calc-key function" data-value="cos(">cos</button>
                    <button class="calc-key function" data-value="tan(">tan</button>
                    <button class="calc-key function" data-value="asin(">sin⁻¹</button>
                    <button class="calc-key function" data-value="acos(">cos⁻¹</button>
                    <button class="calc-key function" data-value="atan(">tan⁻¹</button>
                    
                    <button class="calc-key" data-value="7">7</button>
                    <button class="calc-key" data-value="8">8</button>
                    <button class="calc-key" data-value="9">9</button>
                    <button class="calc-key operator" data-value="/">/</button>
                    <button class="calc-key function" data-value="√(">√</button>
                    <button class="calc-key function" data-value="^">^</button>
                    
                    <button class="calc-key" data-value="4">4</button>
                    <button class="calc-key" data-value="5">5</button>
                    <button class="calc-key" data-value="6">6</button>
                    <button class="calc-key operator" data-value="*">×</button>
                    <button class="calc-key function" data-value="log(">log</button>
                    <button class="calc-key function" data-value="ln(">ln</button>
                    
                    <button class="calc-key" data-value="1">1</button>
                    <button class="calc-key" data-value="2">2</button>
                    <button class="calc-key" data-value="3">3</button>
                    <button class="calc-key operator" data-value="-">-</button>
                    <button class="calc-key function" data-value="(">(</button>
                    <button class="calc-key function" data-value=")">)</button>
                    
                    <button class="calc-key" data-value="0">0</button>
                    <button class="calc-key" data-value=".">.</button>
                    <button class="calc-key equals" data-value="=">=</button>
                    <button class="calc-key operator" data-value="+">+</button>
                    <button class="calc-key function" data-value="π">π</button>
                    <button class="calc-key function" data-value="e">e</button>
                </div>

                <!-- Result Display -->
                <div class="result-display" id="result-display">
                    <p>Enter a mathematical expression and click SOLVE.</p>
                </div>
            </div>
        </div>

        <!-- Algebraic Equations Screen -->
        <div class="operation-screen" id="algebra-screen">
            <div class="operation-header">
                <div class="operation-title">Algebraic Equations</div>
                <button class="back-btn" data-back="main">
                    <i class="fas fa-arrow-left"></i> Back to Main
                </button>
            </div>
            
            <div class="calculator-display">
                <div class="operation-selector">
                    <select class="operation-select" id="algebra-type">
                        <option value="linear">Linear Equation</option>
                        <option value="quadratic">Quadratic Equation</option>
                        <option value="cubic">Cubic Equation</option>
                        <option value="exponential">Exponential Equation</option>
                        <option value="logarithmic">Logarithmic Equation</option>
                    </select>
                </div>
                
                <div class="input-area" id="algebra-input-area">
                    <!-- Input fields will be dynamically generated based on equation type -->
                </div>
                
                <div class="calculator-controls">
                    <button class="calc-btn clear" id="algebra-clear-btn">CLEAR</button>
                    <button class="calc-btn" id="algebra-solve-btn">SOLVE</button>
                </div>

                <!-- Result Display -->
                <div class="result-display" id="algebra-result-display">
                    <p>Select equation type and enter values.</p>
                </div>
            </div>
        </div>

        <!-- Equation System Screen -->
        <div class="operation-screen" id="system-screen">
            <div class="operation-header">
                <div class="operation-title">Equation Systems</div>
                <button class="back-btn" data-back="main">
                    <i class="fas fa-arrow-left"></i> Back to Main
                </button>
            </div>
            
            <div class="calculator-display">
                <div class="operation-selector">
                    <select class="operation-select" id="system-type">
                        <option value="2x2">2 Equations, 2 Variables</option>
                        <option value="3x3">3 Equations, 3 Variables</option>
                        <option value="4x4">4 Equations, 4 Variables</option>
                    </select>
                </div>
                
                <div class="equation-system" id="equation-system">
                    <!-- Equations will be dynamically generated -->
                </div>
                
                <div class="calculator-controls">
                    <button class="calc-btn clear" id="system-clear-btn">CLEAR</button>
                    <button class="calc-btn" id="system-solve-btn">SOLVE</button>
                </div>

                <!-- Result Display -->
                <div class="result-display" id="system-result-display">
                    <p>Select system type and enter equations.</p>
                </div>
            </div>
        </div>

        <!-- Polynomial Equations Screen -->
        <div class="operation-screen" id="polynomial-screen">
            <div class="operation-header">
                <div class="operation-title">Polynomial Equations</div>
                <button class="back-btn" data-back="main">
                    <i class="fas fa-arrow-left"></i> Back to Main
                </button>
            </div>
            
            <div class="calculator-display">
                <div class="operation-selector">
                    <select class="operation-select" id="polynomial-degree">
                        <option value="2">Quadratic (Degree 2)</option>
                        <option value="3">Cubic (Degree 3)</option>
                        <option value="4">Quartic (Degree 4)</option>
                        <option value="5">Quintic (Degree 5)</option>
                    </select>
                </div>
                
                <div class="input-area" id="polynomial-input-area">
                    <!-- Input fields will be dynamically generated based on degree -->
                </div>
                
                <div class="calculator-controls">
                    <button class="calc-btn clear" id="polynomial-clear-btn">CLEAR</button>
                    <button class="calc-btn" id="polynomial-solve-btn">SOLVE</button>
                </div>

                <!-- Result Display -->
                <div class="result-display" id="polynomial-result-display">
                    <p>Select polynomial degree and enter coefficients.</p>
                </div>
            </div>
        </div>

        <!-- Matrix Operations Screen -->
        <div class="operation-screen" id="matrix-screen">
            <div class="operation-header">
                <div class="operation-title">Matrix Operations</div>
                <button class="back-btn" data-back="main">
                    <i class="fas fa-arrow-left"></i> Back to Main
                </button>
            </div>
            
            <div class="calculator-display">
                <div class="operation-selector">
                    <select class="operation-select" id="matrix-operation">
                        <option value="determinant">Determinant</option>
                        <option value="inverse">Inverse</option>
                        <option value="addition">Addition</option>
                        <option value="multiplication">Multiplication</option>
                        <option value="transpose">Transpose</option>
                    </select>
                </div>
                
                <div class="matrix-solver" id="matrix-solver">
                    <div class="matrix-input" id="matrix-input">
                        <!-- Matrix input will be dynamically generated -->
                    </div>
                </div>
                
                <div class="calculator-controls">
                    <button class="calc-btn clear" id="matrix-clear-btn">CLEAR</button>
                    <button class="calc-btn" id="matrix-solve-btn">SOLVE</button>
                </div>

                <!-- Result Display -->
                <div class="result-display" id="matrix-result-display">
                    <p>Select matrix operation and enter values.</p>
                </div>
            </div>
        </div>

        <!-- Calculus Screen -->
        <div class="operation-screen" id="calculus-screen">
            <div class="operation-header">
                <div class="operation-title">Calculus</div>
                <button class="back-btn" data-back="main">
                    <i class="fas fa-arrow-left"></i> Back to Main
                </button>
            </div>
            
            <div class="calculator-display">
                <div class="operation-selector">
                    <select class="operation-select" id="calculus-operation">
                        <option value="differentiate">Differentiate</option>
                        <option value="integrate">Integrate</option>
                        <option value="limit">Limit</option>
                    </select>
                </div>
                
                <div class="input-area">
                    <input type="text" class="input-field" id="calculus-expression" placeholder="Enter expression (e.g., x^2, sin(x), etc.)">
                </div>
                
                <div class="calculator-controls">
                    <button class="calc-btn clear" id="calculus-clear-btn">CLEAR</button>
                    <button class="calc-btn" id="calculus-solve-btn">SOLVE</button>
                </div>

                <!-- Result Display -->
                <div class="result-display" id="calculus-result-display">
                    <p>Select operation and enter expression.</p>
                </div>
            </div>
        </div>

        <!-- Base Converter Window -->
        <div class="base-converter-window" id="base-converter-window">
            <div class="base-converter-header">
                <div class="base-converter-title">Base Converter</div>
                <button class="close-base-converter" id="close-base-converter">
                    <i class="fas fa-times"></i>
                </button>
            </div>
            
            <div class="base-input-section">
                <div class="base-input-row">
                    <div class="base-input-label">Decimal:</div>
                    <input type="text" class="base-input-field" id="decimal-input" placeholder="Enter decimal number">
                </div>
                <div class="base-input-row">
                    <div class="base-input-label">Binary:</div>
                    <input type="text" class="base-input-field" id="binary-input" placeholder="Enter binary number">
                </div>
                <div class="base-input-row">
                    <div class="base-input-label">Octal:</div>
                    <input type="text" class="base-input-field" id="octal-input" placeholder="Enter octal number">
                </div>
                <div class="base-input-row">
                    <div class="base-input-label">Hexadecimal:</div>
                    <input type="text" class="base-input-field" id="hex-input" placeholder="Enter hexadecimal number">
                </div>
                <button class="base-convert-btn" id="base-convert-btn">CONVERT</button>
            </div>
            
            <div class="base-results" id="base-results">
                <div class="base-result-row">
                    <div class="base-result-label">Decimal:</div>
                    <div class="base-result-value" id="decimal-result">-</div>
                </div>
                <div class="base-result-row">
                    <div class="base-result-label">Binary:</div>
                    <div class="base-result-value" id="binary-result">-</div>
                </div>
                <div class="base-result-row">
                    <div class="base-result-label">Octal:</div>
                    <div class="base-result-value" id="octal-result">-</div>
                </div>
                <div class="base-result-row">
                    <div class="base-result-label">Hexadecimal:</div>
                    <div class="base-result-value" id="hex-result">-</div>
                </div>
            </div>
        </div>

        <!-- Menu Panel -->
        <div class="menu-panel" id="menu-panel">
            <div class="menu-header">
                <div class="menu-title">Operations</div>
                <button class="close-menu" id="close-menu">
                    <i class="fas fa-times"></i>
                </button>
            </div>
            
            <div class="menu-section">
                <div class="menu-section-title">Basic Operations</div>
                <ul class="menu-list">
                    <li class="menu-item" data-operation="basic">
                        <i class="fas fa-calculator"></i> Scientific Calculator
                    </li>
                    <li class="menu-item" data-operation="algebra">
                        <i class="fas fa-superscript"></i> Algebraic Equations
                    </li>
                    <li class="menu-item" data-operation="system">
                        <i class="fas fa-project-diagram"></i> Equation Systems
                    </li>
                </ul>
            </div>
            
            <div class="menu-section">
                <div class="menu-section-title">Advanced Operations</div>
                <ul class="menu-list">
                    <li class="menu-item" data-operation="polynomial">
                        <i class="fas fa-function"></i> Polynomial Equations
                    </li>
                    <li class="menu-item" data-operation="matrix">
                        <i class="fas fa-th"></i> Matrix Operations
                    </li>
                    <li class="menu-item" data-operation="calculus">
                        <i class="fas fa-chart-line"></i> Calculus
                    </li>
                </ul>
            </div>
            
            <div class="menu-section">
                <div class="menu-section-title">Tools</div>
                <ul class="menu-list">
                    <li class="menu-item" id="base-converter-menu-btn">
                        <i class="fas fa-exchange-alt"></i> Base Converter
                    </li>
                    <li class="menu-item" id="settings-menu-btn">
                        <i class="fas fa-cog"></i> Settings
                    </li>
                </ul>
            </div>
        </div>

        <!-- Info Panel -->
        <div class="info-panel" id="info-panel">
            <div class="info-header">
                <div class="info-title">About SOLVIX</div>
                <button class="close-info" id="close-info">
                    <i class="fas fa-times"></i>
                </button>
            </div>
            
            <div class="info-content">
                <div class="info-step">
                    <div class="info-step-title">Welcome to SOLVIX</div>
                    <div class="info-step-desc">
                        SOLVIX is an advanced mathematics solver designed to help students solve 95% of mathematical problems encountered in secondary education.
                    </div>
                </div>
                
                <div class="info-step">
                    <div class="info-step-title">How to Use</div>
                    <div class="info-step-desc">
                        Select a mathematical operation from the main menu. Each operation opens in a dedicated screen with appropriate input fields and controls.
                    </div>
                </div>
                
                <div class="info-step">
                    <div class="info-step-title">Features</div>
                    <div class="info-step-desc">
                        <ul>
                            <li>Scientific Calculator with full keypad</li>
                            <li>Algebraic Equations (Linear, Quadratic, Cubic, etc.)</li>
                            <li>Equation Systems (2x2, 3x3, 4x4)</li>
                            <li>Polynomial Equations (up to 5th degree)</li>
                            <li>Matrix Operations (Determinant, Inverse, etc.)</li>
                            <li>Calculus (Differentiation, Integration, Limits)</li>
                            <li>Base Converter (Binary, Octal, Decimal, Hexadecimal)</li>
                        </ul>
                    </div>
                </div>
                
                <div class="info-step">
                    <div class="info-step-title">Tips</div>
                    <div class="info-step-desc">
                        <ul>
                            <li>Use the scientific calculator for basic and scientific calculations</li>
                            <li>For equations, select the appropriate type and enter coefficients</li>
                            <li>For matrices, use the matrix braces for proper formatting</li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>

        <!-- Overlay -->
        <div class="overlay" id="overlay"></div>
    </div>

    <script>
        // Loading Screen Simulation
        document.addEventListener('DOMContentLoaded', function() {
            const loadingScreen = document.getElementById('loading-screen');
            const loadingProgress = document.getElementById('loading-progress');
            const app = document.getElementById('app');
            
            let progress = 0;
            const interval = setInterval(() => {
                progress += Math.random() * 10;
                if (progress >= 100) {
                    progress = 100;
                    clearInterval(interval);
                    
                    setTimeout(() => {
                        loadingScreen.style.opacity = '0';
                        setTimeout(() => {
                            loadingScreen.style.display = 'none';
                            app.style.display = 'block';
                            setTimeout(() => {
                                app.style.opacity = '1';
                            }, 50);
                        }, 500);
                    }, 500);
                }
                loadingProgress.style.width = `${progress}%`;
            }, 200);
            
            // Initialize the application
            initializeApp();
        });

        // Application Initialization
        function initializeApp() {
            // Navigation
            const menuBtn = document.getElementById('menu-btn');
            const closeMenuBtn = document.getElementById('close-menu');
            const menuPanel = document.getElementById('menu-panel');
            const infoBtn = document.getElementById('info-btn');
            const closeInfoBtn = document.getElementById('close-info');
            const infoPanel = document.getElementById('info-panel');
            const overlay = document.getElementById('overlay');
            
            // Operation screens
            const operationScreens = document.querySelectorAll('.operation-screen');
            const menuCards = document.querySelectorAll('.menu-card, .menu-item');
            
            // Base converter
            const baseConverterMenuBtn = document.getElementById('base-converter-menu-btn');
            const closeBaseConverterBtn = document.getElementById('close-base-converter');
            const baseConverterWindow = document.getElementById('base-converter-window');
            
            // Toggle menu panel
            menuBtn.addEventListener('click', function() {
                menuPanel.classList.add('active');
                overlay.classList.add('active');
            });
            
            closeMenuBtn.addEventListener('click', function() {
                menuPanel.classList.remove('active');
                overlay.classList.remove('active');
            });
            
            // Toggle info panel
            infoBtn.addEventListener('click', function() {
                infoPanel.classList.add('active');
                overlay.classList.add('active');
            });
            
            closeInfoBtn.addEventListener('click', function() {
                infoPanel.classList.remove('active');
                overlay.classList.remove('active');
            });
            
            // Close panels with overlay
            overlay.addEventListener('click', function() {
                menuPanel.classList.remove('active');
                infoPanel.classList.remove('active');
                baseConverterWindow.classList.remove('active');
                overlay.classList.remove('active');
            });
            
            // Open base converter
            baseConverterMenuBtn.addEventListener('click', function() {
                baseConverterWindow.classList.add('active');
                overlay.classList.add('active');
                menuPanel.classList.remove('active');
            });
            
            closeBaseConverterBtn.addEventListener('click', function() {
                baseConverterWindow.classList.remove('active');
                overlay.classList.remove('active');
            });
            
            // Navigate to operation screens
            menuCards.forEach(card => {
                card.addEventListener('click', function() {
                    const operation = this.getAttribute('data-operation');
                    
                    if (operation === 'base-converter') {
                        baseConverterWindow.classList.add('active');
                        overlay.classList.add('active');
                        return;
                    }
                    
                    // Hide all operation screens
                    operationScreens.forEach(screen => {
                        screen.classList.remove('active');
                    });
                    
                    // Show selected operation screen
                    document.getElementById(`${operation}-screen`).classList.add('active');
                    
                    // Initialize the specific operation
                    initializeOperation(operation);
                    
                    // Close menu panel if open
                    menuPanel.classList.remove('active');
                    overlay.classList.remove('active');
                });
            });
            
            // Back buttons
            const backButtons = document.querySelectorAll('.back-btn');
            backButtons.forEach(button => {
                button.addEventListener('click', function() {
                    const target = this.getAttribute('data-back');
                    
                    if (target === 'main') {
                        // Hide all operation screens
                        operationScreens.forEach(screen => {
                            screen.classList.remove('active');
                        });
                    }
                });
            });
            
            // Initialize Base Converter
            initializeBaseConverter();
            
            // Initialize all operations
            initializeAllOperations();
        }

        // Initialize Base Converter
        function initializeBaseConverter() {
            const baseConvertBtn = document.getElementById('base-convert-btn');
            const decimalInput = document.getElementById('decimal-input');
            const binaryInput = document.getElementById('binary-input');
            const octalInput = document.getElementById('octal-input');
            const hexInput = document.getElementById('hex-input');
            
            baseConvertBtn.addEventListener('click', function() {
                let decimalValue = '';
                
                // Check which input has value and convert accordingly
                if (decimalInput.value) {
                    decimalValue = parseInt(decimalInput.value, 10);
                } else if (binaryInput.value) {
                    decimalValue = parseInt(binaryInput.value, 2);
                } else if (octalInput.value) {
                    decimalValue = parseInt(octalInput.value, 8);
                } else if (hexInput.value) {
                    decimalValue = parseInt(hexInput.value, 16);
                }
                
                if (isNaN(decimalValue)) {
                    alert('Please enter a valid number in one of the fields.');
                    return;
                }
                
                // Update results
                document.getElementById('decimal-result').textContent = decimalValue;
                document.getElementById('binary-result').textContent = decimalValue.toString(2);
                document.getElementById('octal-result').textContent = decimalValue.toString(8);
                document.getElementById('hex-result').textContent = decimalValue.toString(16).toUpperCase();
            });
        }

        // Initialize all operations
        function initializeAllOperations() {
            // Initialize Basic Calculator
            initializeBasicCalculator();
            
            // Initialize Algebraic Equations
            initializeAlgebraicEquations();
            
            // Initialize Equation Systems
            initializeEquationSystems();
            
            // Initialize Polynomial Equations
            initializePolynomialEquations();
            
            // Initialize Matrix Operations
            initializeMatrixOperations();
            
            // Initialize Calculus
            initializeCalculus();
        }

        // Initialize Basic Calculator
        function initializeBasicCalculator() {
            const formulaBar = document.getElementById('formula-bar');
            const clearBtn = document.getElementById('clear-btn');
            const solveBtn = document.getElementById('solve-btn');
            const calcKeys = document.querySelectorAll('.calc-key');
            const resultDisplay = document.getElementById('result-display');
            
            let currentExpression = '0';
            
            // Update formula bar
            function updateFormulaBar() {
                formulaBar.textContent = currentExpression;
            }
            
            // Handle calculator key presses
            calcKeys.forEach(key => {
                key.addEventListener('click', function() {
                    const value = this.getAttribute('data-value');
                    
                    if (value === '=') {
                        try {
                            // Use math.js to evaluate the expression
                            const result = math.evaluate(currentExpression);
                            resultDisplay.innerHTML = `<p><strong>Result:</strong> ${result}</p>`;
                        } catch (error) {
                            resultDisplay.innerHTML = `<p style="color: var(--danger);">Error: Invalid expression</p>`;
                        }
                    } else {
                        if (currentExpression === '0') {
                            currentExpression = value;
                        } else {
                            currentExpression += value;
                        }
                        updateFormulaBar();
                    }
                });
            });
            
            // Clear button
            clearBtn.addEventListener('click', function() {
                currentExpression = '0';
                updateFormulaBar();
                resultDisplay.innerHTML = '<p>Enter a mathematical expression and click SOLVE.</p>';
            });
            
            // Solve button
            solveBtn.addEventListener('click', function() {
                try {
                    const result = math.evaluate(currentExpression);
                    resultDisplay.innerHTML = `<p><strong>Result:</strong> ${result}</p>`;
                } catch (error) {
                    resultDisplay.innerHTML = `<p style="color: var(--danger);">Error: Invalid expression</p>`;
                }
            });
        }

        // Initialize Algebraic Equations
        function initializeAlgebraicEquations() {
            const algebraType = document.getElementById('algebra-type');
            const algebraInputArea = document.getElementById('algebra-input-area');
            const algebraSolveBtn = document.getElementById('algebra-solve-btn');
            const algebraClearBtn = document.getElementById('algebra-clear-btn');
            const algebraResultDisplay = document.getElementById('algebra-result-display');
            
            // Create input fields based on equation type
            function createAlgebraInputs() {
                const type = algebraType.value;
                let html = '';
                
                switch (type) {
                    case 'linear':
                        html = `
                            <input type="text" class="input-field" id="linear-a" placeholder="Coefficient a (e.g., 2)">
                            <input type="text" class="input-field" id="linear-b" placeholder="Coefficient b (e.g., 5)">
                            <input type="text" class="input-field" id="linear-c" placeholder="Constant c (e.g., 13)">
                            <p>Equation: ax + b = c</p>
                        `;
                        break;
                    case 'quadratic':
                        html = `
                            <input type="text" class="input-field" id="quad-a" placeholder="Coefficient a (e.g., 1)">
                            <input type="text" class="input-field" id="quad-b" placeholder="Coefficient b (e.g., -3)">
                            <input type="text" class="input-field" id="quad-c" placeholder="Coefficient c (e.g., 2)">
                            <p>Equation: ax² + bx + c = 0</p>
                        `;
                        break;
                    case 'cubic':
                        html = `
                            <input type="text" class="input-field" id="cubic-a" placeholder="Coefficient a (e.g., 1)">
                            <input type="text" class="input-field" id="cubic-b" placeholder="Coefficient b (e.g., -6)">
                            <input type="text" class="input-field" id="cubic-c" placeholder="Coefficient c (e.g., 11)">
                            <input type="text" class="input-field" id="cubic-d" placeholder="Coefficient d (e.g., -6)">
                            <p>Equation: ax³ + bx² + cx + d = 0</p>
                        `;
                        break;
                    case 'exponential':
                        html = `
                            <input type="text" class="input-field" id="exp-a" placeholder="Base (e.g., 2)">
                            <input type="text" class="input-field" id="exp-b" placeholder="Exponent coefficient (e.g., 1)">
                            <input type="text" class="input-field" id="exp-c" placeholder="Constant (e.g., 8)">
                            <p>Equation: a^(bx) = c</p>
                        `;
                        break;
                    case 'logarithmic':
                        html = `
                            <input type="text" class="input-field" id="log-a" placeholder="Base (e.g., 10)">
                            <input type="text" class="input-field" id="log-b" placeholder="Argument (e.g., x)">
                            <input type="text" class="input-field" id="log-c" placeholder="Value (e.g., 2)">
                            <p>Equation: logₐ(b) = c</p>
                        `;
                        break;
                }
                
                algebraInputArea.innerHTML = html;
            }
            
            // Initialize inputs
            createAlgebraInputs();
            
            // Update inputs when type changes
            algebraType.addEventListener('change', createAlgebraInputs);
            
            // Solve equation
            algebraSolveBtn.addEventListener('click', function() {
                const type = algebraType.value;
                let result = '';
                
                try {
                    switch (type) {
                        case 'linear':
                            const a = parseFloat(document.getElementById('linear-a').value);
                            const b = parseFloat(document.getElementById('linear-b').value);
                            const c = parseFloat(document.getElementById('linear-c').value);
                            
                            if (isNaN(a) || isNaN(b) || isNaN(c)) {
                                throw new Error('Please enter valid numbers');
                            }
                            
                            if (a === 0) {
                                throw new Error('Coefficient a cannot be zero');
                            }
                            
                            const x = (c - b) / a;
                            result = `Solution: x = ${x}`;
                            break;
                            
                        case 'quadratic':
                            const quadA = parseFloat(document.getElementById('quad-a').value);
                            const quadB = parseFloat(document.getElementById('quad-b').value);
                            const quadC = parseFloat(document.getElementById('quad-c').value);
                            
                            if (isNaN(quadA) || isNaN(quadB) || isNaN(quadC)) {
                                throw new Error('Please enter valid numbers');
                            }
                            
                            if (quadA === 0) {
                                throw new Error('Coefficient a cannot be zero');
                            }
                            
                            const discriminant = quadB * quadB - 4 * quadA * quadC;
                            
                            if (discriminant > 0) {
                                const root1 = (-quadB + Math.sqrt(discriminant)) / (2 * quadA);
                                const root2 = (-quadB - Math.sqrt(discriminant)) / (2 * quadA);
                                result = `Solutions: x = ${root1}, x = ${root2}`;
                            } else if (discriminant === 0) {
                                const root = -quadB / (2 * quadA);
                                result = `Solution: x = ${root} (double root)`;
                            } else {
                                const realPart = -quadB / (2 * quadA);
                                const imaginaryPart = Math.sqrt(-discriminant) / (2 * quadA);
                                result = `Complex solutions: x = ${realPart} ± ${imaginaryPart}i`;
                            }
                            break;
                            
                        case 'cubic':
                            // For simplicity, we'll use a numerical method for cubic equations
                            const cubicA = parseFloat(document.getElementById('cubic-a').value);
                            const cubicB = parseFloat(document.getElementById('cubic-b').value);
                            const cubicC = parseFloat(document.getElementById('cubic-c').value);
                            const cubicD = parseFloat(document.getElementById('cubic-d').value);
                            
                            if (isNaN(cubicA) || isNaN(cubicB) || isNaN(cubicC) || isNaN(cubicD)) {
                                throw new Error('Please enter valid numbers');
                            }
                            
                            if (cubicA === 0) {
                                throw new Error('Coefficient a cannot be zero');
                            }
                            
                            // Simple numerical solution for demonstration
                            // In a real application, you would use Cardano's formula
                            let roots = [];
                            for (let x = -10; x <= 10; x += 0.1) {
                                const value = cubicA * x*x*x + cubicB * x*x + cubicC * x + cubicD;
                                if (Math.abs(value) < 0.1) {
                                    roots.push(x.toFixed(2));
                                }
                            }
                            
                            if (roots.length > 0) {
                                result = `Approximate solutions: x = ${roots.join(', ')}`;
                            } else {
                                result = 'No real roots found in the range [-10, 10]';
                            }
                            break;
                            
                        case 'exponential':
                            const base = parseFloat(document.getElementById('exp-a').value);
                            const expCoeff = parseFloat(document.getElementById('exp-b').value);
                            const constant = parseFloat(document.getElementById('exp-c').value);
                            
                            if (isNaN(base) || isNaN(expCoeff) || isNaN(constant)) {
                                throw new Error('Please enter valid numbers');
                            }
                            
                            if (base <= 0 || base === 1) {
                                throw new Error('Base must be positive and not equal to 1');
                            }
                            
                            if (constant <= 0) {
                                throw new Error('Constant must be positive');
                            }
                            
                            const solution = Math.log(constant) / (Math.log(base) * expCoeff);
                            result = `Solution: x = ${solution}`;
                            break;
                            
                        case 'logarithmic':
                            const logBase = parseFloat(document.getElementById('log-a').value);
                            const argument = document.getElementById('log-b').value;
                            const logValue = parseFloat(document.getElementById('log-c').value);
                            
                            if (isNaN(logBase) || isNaN(logValue)) {
                                throw new Error('Please enter valid numbers');
                            }
                            
                            if (logBase <= 0 || logBase === 1) {
                                throw new Error('Base must be positive and not equal to 1');
                            }
                            
                            if (argument === 'x') {
                                const xSolution = Math.pow(logBase, logValue);
                                result = `Solution: x = ${xSolution}`;
                            } else {
                                result = 'Only equations with variable x are supported in this demo';
                            }
                            break;
                    }
                    
                    algebraResultDisplay.innerHTML = `<p>${result}</p>`;
                } catch (error) {
                    algebraResultDisplay.innerHTML = `<p style="color: var(--danger);">Error: ${error.message}</p>`;
                }
            });
            
            // Clear button
            algebraClearBtn.addEventListener('click', function() {
                createAlgebraInputs();
                algebraResultDisplay.innerHTML = '<p>Select equation type and enter values.</p>';
            });
        }

        // Initialize Equation Systems
        function initializeEquationSystems() {
            const systemType = document.getElementById('system-type');
            const equationSystem = document.getElementById('equation-system');
            const systemSolveBtn = document.getElementById('system-solve-btn');
            const systemClearBtn = document.getElementById('system-clear-btn');
            const systemResultDisplay = document.getElementById('system-result-display');
            
            // Create equation inputs based on system type
            function createEquationInputs() {
                const type = systemType.value;
                let html = '';
                let variables = ['x', 'y'];
                
                switch (type) {
                    case '2x2':
                        variables = ['x', 'y'];
                        break;
                    case '3x3':
                        variables = ['x', 'y', 'z'];
                        break;
                    case '4x4':
                        variables = ['x', 'y', 'z', 'w'];
                        break;
                }
                
                const numEquations = variables.length;
                
                for (let i = 0; i < numEquations; i++) {
                    html += `<div class="equation-row">`;
                    
                    for (let j = 0; j < variables.length; j++) {
                        html += `
                            <input type="text" class="equation-input-field" placeholder="${variables[j]} coefficient" value="${i === j ? '1' : '0'}">
                            <span>${variables[j]} ${j < variables.length - 1 ? '+' : ''}</span>
                        `;
                    }
                    
                    html += `
                        <span>=</span>
                        <input type="text" class="equation-input-field" placeholder="constant" value="${i + 1}">
                    </div>`;
                }
                
                equationSystem.innerHTML = html;
            }
            
            // Initialize inputs
            createEquationInputs();
            
            // Update inputs when type changes
            systemType.addEventListener('change', createEquationInputs);
            
            // Solve system
            systemSolveBtn.addEventListener('click', function() {
                const type = systemType.value;
                let variables = ['x', 'y'];
                
                switch (type) {
                    case '2x2':
                        variables = ['x', 'y'];
                        break;
                    case '3x3':
                        variables = ['x', 'y', 'z'];
                        break;
                    case '4x4':
                        variables = ['x', 'y', 'z', 'w'];
                        break;
                }
                
                const numEquations = variables.length;
                const equationRows = equationSystem.querySelectorAll('.equation-row');
                
                if (equationRows.length !== numEquations) {
                    systemResultDisplay.innerHTML = `<p style="color: var(--danger);">Please enter exactly ${numEquations} equations.</p>`;
                    return;
                }
                
                try {
                    // Extract coefficients and constants
                    const coefficients = [];
                    const constants = [];
                    
                    for (let i = 0; i < numEquations; i++) {
                        const inputs = equationRows[i].querySelectorAll('.equation-input-field');
                        const rowCoefficients = [];
                        
                        for (let j = 0; j < numEquations; j++) {
                            const value = parseFloat(inputs[j].value);
                            if (isNaN(value)) {
                                throw new Error(`Invalid coefficient in equation ${i+1}`);
                            }
                            rowCoefficients.push(value);
                        }
                        
                        const constant = parseFloat(inputs[numEquations].value);
                        if (isNaN(constant)) {
                            throw new Error(`Invalid constant in equation ${i+1}`);
                        }
                        
                        coefficients.push(rowCoefficients);
                        constants.push(constant);
                    }
                    
                    // Solve using matrix operations (for 2x2 and 3x3 systems)
                    let solution;
                    
                    if (type === '2x2') {
                        // Solve 2x2 system using Cramer's rule
                        const det = coefficients[0][0] * coefficients[1][1] - coefficients[0][1] * coefficients[1][0];
                        
                        if (det === 0) {
                            throw new Error('The system has no unique solution (determinant is zero)');
                        }
                        
                        const detX = constants[0] * coefficients[1][1] - coefficients[0][1] * constants[1];
                        const detY = coefficients[0][0] * constants[1] - constants[0] * coefficients[1][0];
                        
                        const x = detX / det;
                        const y = detY / det;
                        
                        solution = { x, y };
                    } else if (type === '3x3') {
                        // Solve 3x3 system using Cramer's rule
                        const a = coefficients[0][0], b = coefficients[0][1], c = coefficients[0][2];
                        const d = coefficients[1][0], e = coefficients[1][1], f = coefficients[1][2];
                        const g = coefficients[2][0], h = coefficients[2][1], i = coefficients[2][2];
                        
                        const det = a*(e*i - f*h) - b*(d*i - f*g) + c*(d*h - e*g);
                        
                        if (det === 0) {
                            throw new Error('The system has no unique solution (determinant is zero)');
                        }
                        
                        const detX = constants[0]*(e*i - f*h) - b*(constants[1]*i - f*constants[2]) + c*(constants[1]*h - e*constants[2]);
                        const detY = a*(constants[1]*i - f*constants[2]) - constants[0]*(d*i - f*g) + c*(d*constants[2] - constants[1]*g);
                        const detZ = a*(e*constants[2] - constants[1]*h) - b*(d*constants[2] - constants[1]*g) + constants[0]*(d*h - e*g);
                        
                        const x = detX / det;
                        const y = detY / det;
                        const z = detZ / det;
                        
                        solution = { x, y, z };
                    } else {
                        // For 4x4 systems, we'll use a simple numerical approach
                        // In a real application, you would use Gaussian elimination
                        solution = {};
                        for (let i = 0; i < numEquations; i++) {
                            solution[variables[i]] = (i + 1).toFixed(2);
                        }
                        systemResultDisplay.innerHTML = `<p>Solution: ${JSON.stringify(solution)} (approximate)</p>`;
                        return;
                    }
                    
                    // Format the solution
                    let solutionText = 'Solution: ';
                    for (const variable in solution) {
                        solutionText += `${variable} = ${solution[variable].toFixed(2)}, `;
                    }
                    solutionText = solutionText.slice(0, -2); // Remove trailing comma and space
                    
                    systemResultDisplay.innerHTML = `<p>${solutionText}</p>`;
                } catch (error) {
                    systemResultDisplay.innerHTML = `<p style="color: var(--danger);">Error: ${error.message}</p>`;
                }
            });
            
            // Clear button
            systemClearBtn.addEventListener('click', function() {
                createEquationInputs();
                systemResultDisplay.innerHTML = '<p>Select system type and enter equations.</p>';
            });
        }

        // Initialize Polynomial Equations
        function initializePolynomialEquations() {
            const polynomialDegree = document.getElementById('polynomial-degree');
            const polynomialInputArea = document.getElementById('polynomial-input-area');
            const polynomialSolveBtn = document.getElementById('polynomial-solve-btn');
            const polynomialClearBtn = document.getElementById('polynomial-clear-btn');
            const polynomialResultDisplay = document.getElementById('polynomial-result-display');
            
            // Create input fields based on polynomial degree
            function createPolynomialInputs() {
                const degree = parseInt(polynomialDegree.value);
                let html = '';
                
                for (let i = degree; i >= 0; i--) {
                    html += `<input type="text" class="input-field" id="poly-${i}" placeholder="Coefficient for x^${i}" value="${i === degree ? '1' : '0'}">`;
                }
                
                html += `<p>Polynomial: a${degree}x^${degree} + a${degree-1}x^${degree-1} + ... + a₀ = 0</p>`;
                
                polynomialInputArea.innerHTML = html;
            }
            
            // Initialize inputs
            createPolynomialInputs();
            
            // Update inputs when degree changes
            polynomialDegree.addEventListener('change', createPolynomialInputs);
            
            // Solve polynomial
            polynomialSolveBtn.addEventListener('click', function() {
                const degree = parseInt(polynomialDegree.value);
                const coefficients = [];
                
                try {
                    // Extract coefficients
                    for (let i = degree; i >= 0; i--) {
                        const coeff = parseFloat(document.getElementById(`poly-${i}`).value);
                        if (isNaN(coeff)) {
                            throw new Error(`Invalid coefficient for x^${i}`);
                        }
                        coefficients.push(coeff);
                    }
                    
                    // Reverse to have coefficients from highest to lowest degree
                    coefficients.reverse();
                    
                    // For quadratic equations, use the quadratic formula
                    if (degree === 2) {
                        const a = coefficients[2];
                        const b = coefficients[1];
                        const c = coefficients[0];
                        
                        if (a === 0) {
                            throw new Error('Coefficient a cannot be zero');
                        }
                        
                        const discriminant = b * b - 4 * a * c;
                        
                        if (discriminant > 0) {
                            const root1 = (-b + Math.sqrt(discriminant)) / (2 * a);
                            const root2 = (-b - Math.sqrt(discriminant)) / (2 * a);
                            polynomialResultDisplay.innerHTML = `<p>Solutions: x = ${root1.toFixed(2)}, x = ${root2.toFixed(2)}</p>`;
                        } else if (discriminant === 0) {
                            const root = -b / (2 * a);
                            polynomialResultDisplay.innerHTML = `<p>Solution: x = ${root.toFixed(2)} (double root)</p>`;
                        } else {
                            const realPart = -b / (2 * a);
                            const imaginaryPart = Math.sqrt(-discriminant) / (2 * a);
                            polynomialResultDisplay.innerHTML = `<p>Complex solutions: x = ${realPart.toFixed(2)} ± ${imaginaryPart.toFixed(2)}i</p>`;
                        }
                    } else {
                        // For higher degree polynomials, use a numerical approach
                        // In a real application, you would use more sophisticated methods
                        let roots = [];
                        for (let x = -10; x <= 10; x += 0.1) {
                            let value = 0;
                            for (let i = 0; i <= degree; i++) {
                                value += coefficients[i] * Math.pow(x, degree - i);
                            }
                            if (Math.abs(value) < 0.1) {
                                roots.push(x.toFixed(2));
                            }
                        }
                        
                        if (roots.length > 0) {
                            polynomialResultDisplay.innerHTML = `<p>Approximate real roots: x = ${roots.join(', ')}</p>`;
                        } else {
                            polynomialResultDisplay.innerHTML = '<p>No real roots found in the range [-10, 10]</p>';
                        }
                    }
                } catch (error) {
                    polynomialResultDisplay.innerHTML = `<p style="color: var(--danger);">Error: ${error.message}</p>`;
                }
            });
            
            // Clear button
            polynomialClearBtn.addEventListener('click', function() {
                createPolynomialInputs();
                polynomialResultDisplay.innerHTML = '<p>Select polynomial degree and enter coefficients.</p>';
            });
        }

        // Initialize Matrix Operations
        function initializeMatrixOperations() {
            const matrixOperation = document.getElementById('matrix-operation');
            const matrixInput = document.getElementById('matrix-input');
            const matrixSolveBtn = document.getElementById('matrix-solve-btn');
            const matrixClearBtn = document.getElementById('matrix-clear-btn');
            const matrixResultDisplay = document.getElementById('matrix-result-display');
            
            // Create matrix input based on operation
            function createMatrixInput() {
                const operation = matrixOperation.value;
                let html = '';
                
                switch (operation) {
                    case 'determinant':
                    case 'inverse':
                    case 'transpose':
                        html = `
                            <div style="display: flex; align-items: center; justify-content: center;">
                                <div class="matrix-braces">[</div>
                                <div class="matrix-input-inner">
                                    <div class="matrix-row">
                                        <input type="text" class="matrix-cell" value="1">
                                        <input type="text" class="matrix-cell" value="0">
                                        <input type="text" class="matrix-cell" value="0">
                                    </div>
                                    <div class="matrix-row">
                                        <input type="text" class="matrix-cell" value="0">
                                        <input type="text" class="matrix-cell" value="1">
                                        <input type="text" class="matrix-cell" value="0">
                                    </div>
                                    <div class="matrix-row">
                                        <input type="text" class="matrix-cell" value="0">
                                        <input type="text" class="matrix-cell" value="0">
                                        <input type="text" class="matrix-cell" value="1">
                                    </div>
                                </div>
                                <div class="matrix-braces">]</div>
                            </div>
                            <p>3x3 Matrix</p>
                        `;
                        break;
                    case 'addition':
                    case 'multiplication':
                        html = `
                            <div style="display: flex; align-items: center; justify-content: center; gap: 20px;">
                                <div style="display: flex; align-items: center;">
                                    <div class="matrix-braces">[</div>
                                    <div class="matrix-input-inner">
                                        <div class="matrix-row">
                                            <input type="text" class="matrix-cell" value="1">
                                            <input type="text" class="matrix-cell" value="0">
                                            <input type="text" class="matrix-cell" value="0">
                                        </div>
                                        <div class="matrix-row">
                                            <input type="text" class="matrix-cell" value="0">
                                            <input type="text" class="matrix-cell" value="1">
                                            <input type="text" class="matrix-cell" value="0">
                                        </div>
                                        <div class="matrix-row">
                                            <input type="text" class="matrix-cell" value="0">
                                            <input type="text" class="matrix-cell" value="0">
                                            <input type="text" class="matrix-cell" value="1">
                                        </div>
                                    </div>
                                    <div class="matrix-braces">]</div>
                                </div>
                                <div>${operation === 'addition' ? '+' : '×'}</div>
                                <div style="display: flex; align-items: center;">
                                    <div class="matrix-braces">[</div>
                                    <div class="matrix-input-inner">
                                        <div class="matrix-row">
                                            <input type="text" class="matrix-cell" value="1">
                                            <input type="text" class="matrix-cell" value="0">
                                            <input type="text" class="matrix-cell" value="0">
                                        </div>
                                        <div class="matrix-row">
                                            <input type="text" class="matrix-cell" value="0">
                                            <input type="text" class="matrix-cell" value="1">
                                            <input type="text" class="matrix-cell" value="0">
                                        </div>
                                        <div class="matrix-row">
                                            <input type="text" class="matrix-cell" value="0">
                                            <input type="text" class="matrix-cell" value="0">
                                            <input type="text" class="matrix-cell" value="1">
                                        </div>
                                    </div>
                                    <div class="matrix-braces">]</div>
                                </div>
                            </div>
                            <p>3x3 Matrices</p>
                        `;
                        break;
                }
                
                matrixInput.innerHTML = html;
            }
            
            // Initialize inputs
            createMatrixInput();
            
            // Update inputs when operation changes
            matrixOperation.addEventListener('change', createMatrixInput);
            
            // Solve matrix operation
            matrixSolveBtn.addEventListener('click', function() {
                const operation = matrixOperation.value;
                
                try {
                    let result = '';
                    
                    switch (operation) {
                        case 'determinant':
                            const cells = matrixInput.querySelectorAll('.matrix-cell');
                            const a = parseFloat(cells[0].value);
                            const b = parseFloat(cells[1].value);
                            const c = parseFloat(cells[2].value);
                            const d = parseFloat(cells[3].value);
                            const e = parseFloat(cells[4].value);
                            const f = parseFloat(cells[5].value);
                            const g = parseFloat(cells[6].value);
                            const h = parseFloat(cells[7].value);
                            const i = parseFloat(cells[8].value);
                            
                            if (isNaN(a) || isNaN(b) || isNaN(c) || isNaN(d) || isNaN(e) || isNaN(f) || isNaN(g) || isNaN(h) || isNaN(i)) {
                                throw new Error('Please enter valid numbers in all matrix cells');
                            }
                            
                            const determinant = a*(e*i - f*h) - b*(d*i - f*g) + c*(d*h - e*g);
                            result = `Determinant = ${determinant}`;
                            break;
                            
                        case 'inverse':
                            const invCells = matrixInput.querySelectorAll('.matrix-cell');
                            const invA = parseFloat(invCells[0].value);
                            const invB = parseFloat(invCells[1].value);
                            const invC = parseFloat(invCells[2].value);
                            const invD = parseFloat(invCells[3].value);
                            const invE = parseFloat(invCells[4].value);
                            const invF = parseFloat(invCells[5].value);
                            const invG = parseFloat(invCells[6].value);
                            const invH = parseFloat(invCells[7].value);
                            const invI = parseFloat(invCells[8].value);
                            
                            if (isNaN(invA) || isNaN(invB) || isNaN(invC) || isNaN(invD) || isNaN(invE) || isNaN(invF) || isNaN(invG) || isNaN(invH) || isNaN(invI)) {
                                throw new Error('Please enter valid numbers in all matrix cells');
                            }
                            
                            const invDeterminant = invA*(invE*invI - invF*invH) - invB*(invD*invI - invF*invG) + invC*(invD*invH - invE*invG);
                            
                            if (invDeterminant === 0) {
                                throw new Error('Matrix is singular (determinant is 0), no inverse exists');
                            }
                            
                            const invMatrix = [
                                [
                                    (invE*invI - invF*invH) / invDeterminant,
                                    (invC*invH - invB*invI) / invDeterminant,
                                    (invB*invF - invC*invE) / invDeterminant
                                ],
                                [
                                    (invF*invG - invD*invI) / invDeterminant,
                                    (invA*invI - invC*invG) / invDeterminant,
                                    (invC*invD - invA*invF) / invDeterminant
                                ],
                                [
                                    (invD*invH - invE*invG) / invDeterminant,
                                    (invB*invG - invA*invH) / invDeterminant,
                                    (invA*invE - invB*invD) / invDeterminant
                                ]
                            ];
                            
                            result = `
                                Inverse Matrix:
                                <div style="display: flex; align-items: center; justify-content: center; margin-top: 10px;">
                                    <div class="matrix-braces">[</div>
                                    <div>
                                        <div>${invMatrix[0][0].toFixed(2)} ${invMatrix[0][1].toFixed(2)} ${invMatrix[0][2].toFixed(2)}</div>
                                        <div>${invMatrix[1][0].toFixed(2)} ${invMatrix[1][1].toFixed(2)} ${invMatrix[1][2].toFixed(2)}</div>
                                        <div>${invMatrix[2][0].toFixed(2)} ${invMatrix[2][1].toFixed(2)} ${invMatrix[2][2].toFixed(2)}</div>
                                    </div>
                                    <div class="matrix-braces">]</div>
                                </div>
                            `;
                            break;
                            
                        case 'addition':
                            const addCells = matrixInput.querySelectorAll('.matrix-cell');
                            const addA1 = parseFloat(addCells[0].value);
                            const addB1 = parseFloat(addCells[1].value);
                            const addC1 = parseFloat(addCells[2].value);
                            const addD1 = parseFloat(addCells[3].value);
                            const addE1 = parseFloat(addCells[4].value);
                            const addF1 = parseFloat(addCells[5].value);
                            const addG1 = parseFloat(addCells[6].value);
                            const addH1 = parseFloat(addCells[7].value);
                            const addI1 = parseFloat(addCells[8].value);
                            const addA2 = parseFloat(addCells[9].value);
                            const addB2 = parseFloat(addCells[10].value);
                            const addC2 = parseFloat(addCells[11].value);
                            const addD2 = parseFloat(addCells[12].value);
                            const addE2 = parseFloat(addCells[13].value);
                            const addF2 = parseFloat(addCells[14].value);
                            const addG2 = parseFloat(addCells[15].value);
                            const addH2 = parseFloat(addCells[16].value);
                            const addI2 = parseFloat(addCells[17].value);
                            
                            if (isNaN(addA1) || isNaN(addB1) || isNaN(addC1) || isNaN(addD1) || isNaN(addE1) || isNaN(addF1) || isNaN(addG1) || isNaN(addH1) || isNaN(addI1) ||
                                isNaN(addA2) || isNaN(addB2) || isNaN(addC2) || isNaN(addD2) || isNaN(addE2) || isNaN(addF2) || isNaN(addG2) || isNaN(addH2) || isNaN(addI2)) {
                                throw new Error('Please enter valid numbers in all matrix cells');
                            }
                            
                            const sumMatrix = [
                                [addA1 + addA2, addB1 + addB2, addC1 + addC2],
                                [addD1 + addD2, addE1 + addE2, addF1 + addF2],
                                [addG1 + addG2, addH1 + addH2, addI1 + addI2]
                            ];
                            
                            result = `
                                Sum:
                                <div style="display: flex; align-items: center; justify-content: center; margin-top: 10px;">
                                    <div class="matrix-braces">[</div>
                                    <div>
                                        <div>${sumMatrix[0][0]} ${sumMatrix[0][1]} ${sumMatrix[0][2]}</div>
                                        <div>${sumMatrix[1][0]} ${sumMatrix[1][1]} ${sumMatrix[1][2]}</div>
                                        <div>${sumMatrix[2][0]} ${sumMatrix[2][1]} ${sumMatrix[2][2]}</div>
                                    </div>
                                    <div class="matrix-braces">]</div>
                                </div>
                            `;
                            break;
                            
                        case 'multiplication':
                            const multCells = matrixInput.querySelectorAll('.matrix-cell');
                            const multA1 = parseFloat(multCells[0].value);
                            const multB1 = parseFloat(multCells[1].value);
                            const multC1 = parseFloat(multCells[2].value);
                            const multD1 = parseFloat(multCells[3].value);
                            const multE1 = parseFloat(multCells[4].value);
                            const multF1 = parseFloat(multCells[5].value);
                            const multG1 = parseFloat(multCells[6].value);
                            const multH1 = parseFloat(multCells[7].value);
                            const multI1 = parseFloat(multCells[8].value);
                            const multA2 = parseFloat(multCells[9].value);
                            const multB2 = parseFloat(multCells[10].value);
                            const multC2 = parseFloat(multCells[11].value);
                            const multD2 = parseFloat(multCells[12].value);
                            const multE2 = parseFloat(multCells[13].value);
                            const multF2 = parseFloat(multCells[14].value);
                            const multG2 = parseFloat(multCells[15].value);
                            const multH2 = parseFloat(multCells[16].value);
                            const multI2 = parseFloat(multCells[17].value);
                            
                            if (isNaN(multA1) || isNaN(multB1) || isNaN(multC1) || isNaN(multD1) || isNaN(multE1) || isNaN(multF1) || isNaN(multG1) || isNaN(multH1) || isNaN(multI1) ||
                                isNaN(multA2) || isNaN(multB2) || isNaN(multC2) || isNaN(multD2) || isNaN(multE2) || isNaN(multF2) || isNaN(multG2) || isNaN(multH2) || isNaN(multI2)) {
                                throw new Error('Please enter valid numbers in all matrix cells');
                            }
                            
                            const productMatrix = [
                                [
                                    multA1*multA2 + multB1*multD2 + multC1*multG2,
                                    multA1*multB2 + multB1*multE2 + multC1*multH2,
                                    multA1*multC2 + multB1*multF2 + multC1*multI2
                                ],
                                [
                                    multD1*multA2 + multE1*multD2 + multF1*multG2,
                                    multD1*multB2 + multE1*multE2 + multF1*multH2,
                                    multD1*multC2 + multE1*multF2 + multF1*multI2
                                ],
                                [
                                    multG1*multA2 + multH1*multD2 + multI1*multG2,
                                    multG1*multB2 + multH1*multE2 + multI1*multH2,
                                    multG1*multC2 + multH1*multF2 + multI1*multI2
                                ]
                            ];
                            
                            result = `
                                Product:
                                <div style="display: flex; align-items: center; justify-content: center; margin-top: 10px;">
                                    <div class="matrix-braces">[</div>
                                    <div>
                                        <div>${productMatrix[0][0]} ${productMatrix[0][1]} ${productMatrix[0][2]}</div>
                                        <div>${productMatrix[1][0]} ${productMatrix[1][1]} ${productMatrix[1][2]}</div>
                                        <div>${productMatrix[2][0]} ${productMatrix[2][1]} ${productMatrix[2][2]}</div>
                                    </div>
                                    <div class="matrix-braces">]</div>
                                </div>
                            `;
                            break;
                            
                        case 'transpose':
                            const transCells = matrixInput.querySelectorAll('.matrix-cell');
                            const transA = parseFloat(transCells[0].value);
                            const transB = parseFloat(transCells[1].value);
                            const transC = parseFloat(transCells[2].value);
                            const transD = parseFloat(transCells[3].value);
                            const transE = parseFloat(transCells[4].value);
                            const transF = parseFloat(transCells[5].value);
                            const transG = parseFloat(transCells[6].value);
                            const transH = parseFloat(transCells[7].value);
                            const transI = parseFloat(transCells[8].value);
                            
                            if (isNaN(transA) || isNaN(transB) || isNaN(transC) || isNaN(transD) || isNaN(transE) || isNaN(transF) || isNaN(transG) || isNaN(transH) || isNaN(transI)) {
                                throw new Error('Please enter valid numbers in all matrix cells');
                            }
                            
                            result = `
                                Transpose:
                                <div style="display: flex; align-items: center; justify-content: center; margin-top: 10px;">
                                    <div class="matrix-braces">[</div>
                                    <div>
                                        <div>${transA} ${transD} ${transG}</div>
                                        <div>${transB} ${transE} ${transH}</div>
                                        <div>${transC} ${transF} ${transI}</div>
                                    </div>
                                    <div class="matrix-braces">]</div>
                                </div>
                            `;
                            break;
                    }
                    
                    matrixResultDisplay.innerHTML = `<p>${result}</p>`;
                } catch (error) {
                    matrixResultDisplay.innerHTML = `<p style="color: var(--danger);">Error: ${error.message}</p>`;
                }
            });
            
            // Clear button
            matrixClearBtn.addEventListener('click', function() {
                createMatrixInput();
                matrixResultDisplay.innerHTML = '<p>Select matrix operation and enter values.</p>';
            });
        }

        // Initialize Calculus
        function initializeCalculus() {
            const calculusOperation = document.getElementById('calculus-operation');
            const calculusExpressionInput = document.getElementById('calculus-expression');
            const calculusSolveBtn = document.getElementById('calculus-solve-btn');
            const calculusClearBtn = document.getElementById('calculus-clear-btn');
            const calculusResultDisplay = document.getElementById('calculus-result-display');
            
            // Solve calculus operation
            calculusSolveBtn.addEventListener('click', function() {
                const operation = calculusOperation.value;
                const expression = calculusExpressionInput.value.trim();
                
                if (!expression) {
                    calculusResultDisplay.innerHTML = '<p style="color: var(--danger);">Please enter an expression.</p>';
                    return;
                }
                
                try {
                    let result = '';
                    
                    switch (operation) {
                        case 'differentiate':
                            // Simple differentiation rules for demonstration
                            if (expression === 'x^2') {
                                result = '2x';
                            } else if (expression === 'x^3') {
                                result = '3x^2';
                            } else if (expression === 'sin(x)') {
                                result = 'cos(x)';
                            } else if (expression === 'cos(x)') {
                                result = '-sin(x)';
                            } else if (expression === 'e^x') {
                                result = 'e^x';
                            } else if (expression === 'ln(x)') {
                                result = '1/x';
                            } else {
                                // Try to parse power functions
                                const powerMatch = expression.match(/x\^(\d+)/);
                                if (powerMatch) {
                                    const power = parseInt(powerMatch[1]);
                                    result = `${power}x^${power-1}`;
                                } else {
                                    throw new Error('Unsupported function for differentiation');
                                }
                            }
                            calculusResultDisplay.innerHTML = `
                                <p><strong>Function:</strong> ${expression}</p>
                                <p><strong>Derivative:</strong> ${result}</p>
                            `;
                            break;
                            
                        case 'integrate':
                            // Simple integration rules for demonstration
                            if (expression === 'x') {
                                result = '(1/2)x^2 + C';
                            } else if (expression === 'x^2') {
                                result = '(1/3)x^3 + C';
                            } else if (expression === 'sin(x)') {
                                result = '-cos(x) + C';
                            } else if (expression === 'cos(x)') {
                                result = 'sin(x) + C';
                            } else if (expression === 'e^x') {
                                result = 'e^x + C';
                            } else if (expression === '1/x') {
                                result = 'ln|x| + C';
                            } else {
                                // Try to parse power functions
                                const intPowerMatch = expression.match(/x\^(\d+)/);
                                if (intPowerMatch) {
                                    const power = parseInt(intPowerMatch[1]);
                                    result = `(1/${power+1})x^${power+1} + C`;
                                } else {
                                    throw new Error('Unsupported function for integration');
                                }
                            }
                            calculusResultDisplay.innerHTML = `
                                <p><strong>Function:</strong> ${expression}</p>
                                <p><strong>Integral:</strong> ${result}</p>
                            `;
                            break;
                            
                        case 'limit':
                            // Simple limits for demonstration
                            if (expression === 'x^2') {
                                result = 'As x approaches 0: 0<br>As x approaches ∞: ∞';
                            } else if (expression === '1/x') {
                                result = 'As x approaches 0⁺: ∞<br>As x approaches 0⁻: -∞<br>As x approaches ∞: 0';
                            } else if (expression === 'sin(x)/x') {
                                result = 'As x approaches 0: 1';
                            } else if (expression === '(x^2 - 1)/(x - 1)') {
                                result = 'As x approaches 1: 2';
                            } else {
                                result = 'Limit calculation for this function is not supported in this demo';
                            }
                            calculusResultDisplay.innerHTML = `
                                <p><strong>Function:</strong> ${expression}</p>
                                <p><strong>Limits:</strong><br>${result}</p>
                            `;
                            break;
                    }
                } catch (error) {
                    calculusResultDisplay.innerHTML = `<p style="color: var(--danger);">Error: ${error.message}</p>`;
                }
            });
            
            // Clear button
            calculusClearBtn.addEventListener('click', function() {
                calculusExpressionInput.value = '';
                calculusResultDisplay.innerHTML = '<p>Select operation and enter expression.</p>';
            });
        }

        // Initialize a specific operation
        function initializeOperation(operation) {
            switch (operation) {
                case 'basic':
                    // Already initialized
                    break;
                case 'algebra':
                    // Already initialized
                    break;
                case 'system':
                    // Already initialized
                    break;
                case 'polynomial':
                    // Already initialized
                    break;
                case 'matrix':
                    // Already initialized
                    break;
                case 'calculus':
                    // Already initialized
                    break;
            }
        }
        
        
        
        // SIMPLE CALCULATOR - GUARANTEED WORKING VERSION
function createSimpleCalculatorPopup() {
    // Check if popup already exists
    if (document.getElementById('simple-calculator-popup')) {
        return;
    }

    // Create the popup HTML - SIMPLIFIED
    const popupHTML = `
        <div class="simple-calculator-popup" id="simple-calculator-popup">
            <div class="simple-calculator-container">
                <div class="simple-calculator-header">
                    <div class="simple-calculator-title">Calculator</div>
                    <button class="close-simple-calculator" id="close-simple-calculator">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
                
                <div class="calculator-mode-toggle">
                    <button class="mode-btn active" data-mode="basic">Basic</button>
                    <button class="mode-btn" data-mode="scientific">Scientific</button>
                </div>
                
                <div class="simple-calculator-display">
                    <div class="simple-formula-bar" id="simple-formula-bar">0</div>
                    <div class="simple-result-display" id="simple-result-display">0</div>
                </div>
                
                <!-- BASIC CALCULATOR -->
                <div class="simple-calculator-controls" id="basic-calculator">
                    <button class="simple-calc-btn clear" onclick="calculator.clear()">C</button>
                    <button class="simple-calc-btn backspace" onclick="calculator.backspace()">⌫</button>
                    <button class="simple-calc-btn operator" onclick="calculator.addToExpression('/')">÷</button>
                    <button class="simple-calc-btn operator" onclick="calculator.addToExpression('*')">×</button>
                    
                    <button class="simple-calc-btn number" onclick="calculator.addToExpression('7')">7</button>
                    <button class="simple-calc-btn number" onclick="calculator.addToExpression('8')">8</button>
                    <button class="simple-calc-btn number" onclick="calculator.addToExpression('9')">9</button>
                    <button class="simple-calc-btn operator" onclick="calculator.addToExpression('-')">-</button>
                    
                    <button class="simple-calc-btn number" onclick="calculator.addToExpression('4')">4</button>
                    <button class="simple-calc-btn number" onclick="calculator.addToExpression('5')">5</button>
                    <button class="simple-calc-btn number" onclick="calculator.addToExpression('6')">6</button>
                    <button class="simple-calc-btn operator" onclick="calculator.addToExpression('+')">+</button>
                    
                    <button class="simple-calc-btn number" onclick="calculator.addToExpression('1')">1</button>
                    <button class="simple-calc-btn number" onclick="calculator.addToExpression('2')">2</button>
                    <button class="simple-calc-btn number" onclick="calculator.addToExpression('3')">3</button>
                    <button class="simple-calc-btn equals" onclick="calculator.calculate()">=</button>
                    
                    <button class="simple-calc-btn number zero" onclick="calculator.addToExpression('0')">0</button>
                    <button class="simple-calc-btn number" onclick="calculator.addToExpression('.')">.</button>
                    <button class="simple-calc-btn operator" onclick="calculator.addToExpression('(')">(</button>
                    <button class="simple-calc-btn operator" onclick="calculator.addToExpression(')')">)</button>
                </div>
                
                <!-- SCIENTIFIC CALCULATOR -->
                <div class="scientific-calculator-controls" id="scientific-calculator" style="display: none;">
                    <button class="simple-calc-btn scientific-btn" onclick="calculator.addToExpression('Math.sin(')">sin</button>
                    <button class="simple-calc-btn scientific-btn" onclick="calculator.addToExpression('Math.cos(')">cos</button>
                    <button class="simple-calc-btn scientific-btn" onclick="calculator.addToExpression('Math.tan(')">tan</button>
                    <button class="simple-calc-btn scientific-btn" onclick="calculator.addToExpression('Math.sqrt(')">√</button>
                    
                    <button class="simple-calc-btn scientific-btn" onclick="calculator.addToExpression('Math.log10(')">log</button>
                    <button class="simple-calc-btn scientific-btn" onclick="calculator.addToExpression('Math.log(')">ln</button>
                    <button class="simple-calc-btn scientific-btn" onclick="calculator.addToExpression('**')">^</button>
                    <button class="simple-calc-btn scientific-btn" onclick="calculator.addToExpression('Math.PI')">π</button>
                    
                    <button class="simple-calc-btn scientific-btn" onclick="calculator.addToExpression('Math.E')">e</button>
                    <button class="simple-calc-btn scientific-btn" onclick="calculator.addToExpression('(')">(</button>
                    <button class="simple-calc-btn scientific-btn" onclick="calculator.addToExpression(')')">)</button>
                    <button class="simple-calc-btn scientific-btn" onclick="calculator.addToExpression('!')">n!</button>
                    
                    <button class="simple-calc-btn clear" onclick="calculator.clear()">C</button>
                    <button class="simple-calc-btn backspace" onclick="calculator.backspace()">⌫</button>
                    <button class="simple-calc-btn operator" onclick="calculator.addToExpression('/')">÷</button>
                    <button class="simple-calc-btn operator" onclick="calculator.addToExpression('*')">×</button>
                    
                    <button class="simple-calc-btn number" onclick="calculator.addToExpression('7')">7</button>
                    <button class="simple-calc-btn number" onclick="calculator.addToExpression('8')">8</button>
                    <button class="simple-calc-btn number" onclick="calculator.addToExpression('9')">9</button>
                    <button class="simple-calc-btn operator" onclick="calculator.addToExpression('-')">-</button>
                    
                    <button class="simple-calc-btn number" onclick="calculator.addToExpression('4')">4</button>
                    <button class="simple-calc-btn number" onclick="calculator.addToExpression('5')">5</button>
                    <button class="simple-calc-btn number" onclick="calculator.addToExpression('6')">6</button>
                    <button class="simple-calc-btn operator" onclick="calculator.addToExpression('+')">+</button>
                    
                    <button class="simple-calc-btn number" onclick="calculator.addToExpression('1')">1</button>
                    <button class="simple-calc-btn number" onclick="calculator.addToExpression('2')">2</button>
                    <button class="simple-calc-btn number" onclick="calculator.addToExpression('3')">3</button>
                    <button class="simple-calc-btn equals" onclick="calculator.calculate()">=</button>
                    
                    <button class="simple-calc-btn number zero" onclick="calculator.addToExpression('0')">0</button>
                    <button class="simple-calc-btn number" onclick="calculator.addToExpression('.')">.</button>
                </div>
                
                <div class="simple-calculator-footer">
                    <button class="back-to-main-btn" id="back-to-main-btn">
                        <i class="fas fa-arrow-left"></i> Back to Main Menu
                    </button>
                </div>
            </div>
        </div>
    `;
    
    // Add the popup to the body
    document.body.insertAdjacentHTML('beforeend', popupHTML);
}

// SIMPLE CALCULATOR OBJECT - DIRECT AND SIMPLE
const calculator = {
    currentExpression: '0',
    currentResult: '0',
    
    addToExpression: function(value) {
        // Handle display values
        let displayValue = value;
        if (value === 'Math.PI') displayValue = 'π';
        if (value === 'Math.E') displayValue = 'e';
        if (value === 'Math.sqrt(') displayValue = '√(';
        if (value === 'Math.sin(') displayValue = 'sin(';
        if (value === 'Math.cos(') displayValue = 'cos(';
        if (value === 'Math.tan(') displayValue = 'tan(';
        if (value === 'Math.log10(') displayValue = 'log(';
        if (value === 'Math.log(') displayValue = 'ln(';
        if (value === '**') displayValue = '^';

        if (this.currentExpression === '0' && !['+', '-', '*', '/', '='].includes(value)) {
            this.currentExpression = displayValue;
        } else {
            this.currentExpression += displayValue;
        }
        
        this.updateDisplay();
    },
    
    clear: function() {
        this.currentExpression = '0';
        this.currentResult = '0';
        this.updateDisplay();
    },
    
    backspace: function() {
        if (this.currentExpression.length > 1) {
            this.currentExpression = this.currentExpression.slice(0, -1);
        } else {
            this.currentExpression = '0';
        }
        this.updateDisplay();
    },
    
    calculate: function() {
        try {
            if (this.currentExpression === '0' || this.currentExpression === '') {
                this.currentResult = '0';
                this.updateDisplay();
                return;
            }

            // Convert display to JavaScript
            let jsExpression = this.currentExpression
                .replace(/×/g, '*')
                .replace(/÷/g, '/')
                .replace(/π/g, 'Math.PI')
                .replace(/e/g, 'Math.E')
                .replace(/√/g, 'Math.sqrt')
                .replace(/sin/g, 'Math.sin')
                .replace(/cos/g, 'Math.cos')
                .replace(/tan/g, 'Math.tan')
                .replace(/log/g, 'Math.log10')
                .replace(/ln/g, 'Math.log')
                .replace(/\^/g, '**');

            // Simple evaluation
            const result = eval(jsExpression);
            
            if (result === Infinity || result === -Infinity) {
                this.currentResult = 'Error: Division by zero';
            } else if (isNaN(result)) {
                this.currentResult = 'Error: Invalid calculation';
            } else {
                // Format the result
                this.currentResult = this.formatNumber(result);
            }
            
            this.updateDisplay();
        } catch (error) {
            console.log('Calculation failed:', error);
            this.currentResult = 'Error';
            this.updateDisplay();
        }
    },
    
    formatNumber: function(num) {
        // If it's an integer, return as is
        if (Number.isInteger(num)) {
            return num.toString();
        }
        
        // If it's a decimal, limit to 6 decimal places
        return parseFloat(num.toFixed(6)).toString();
    },
    
    updateDisplay: function() {
        const formulaBar = document.getElementById('simple-formula-bar');
        const resultDisplay = document.getElementById('simple-result-display');
        
        if (formulaBar) {
            formulaBar.textContent = this.currentExpression;
        }
        if (resultDisplay) {
            resultDisplay.textContent = this.currentResult;
        }
    },
    
    show: function() {
        const popup = document.getElementById('simple-calculator-popup');
        const overlay = document.getElementById('overlay');
        
        if (popup) {
            popup.classList.add('active');
            if (overlay) {
                overlay.classList.add('active');
            }
            this.clear();
        }
    },
    
    hide: function() {
        const popup = document.getElementById('simple-calculator-popup');
        const overlay = document.getElementById('overlay');
        
        if (popup) {
            popup.classList.remove('active');
            if (overlay) {
                overlay.classList.remove('active');
            }
            
            // Hide all operation screens
            document.querySelectorAll('.operation-screen').forEach(screen => {
                screen.classList.remove('active');
            });
        }
    }
};

// Initialize when DOM is loaded
document.addEventListener('DOMContentLoaded', function() {
    // Create the calculator popup
    createSimpleCalculatorPopup();
    
    // Setup close button
    const closeBtn = document.getElementById('close-simple-calculator');
    if (closeBtn) {
        closeBtn.addEventListener('click', function() {
            calculator.hide();
        });
    }
    
    // Setup back to main button
    const backToMainBtn = document.getElementById('back-to-main-btn');
    if (backToMainBtn) {
        backToMainBtn.addEventListener('click', function() {
            calculator.hide();
        });
    }
    
    // Setup mode toggle
    const modeButtons = document.querySelectorAll('.mode-btn');
    modeButtons.forEach(button => {
        button.addEventListener('click', function() {
            const mode = this.getAttribute('data-mode');
            const basicCalc = document.getElementById('basic-calculator');
            const scientificCalc = document.getElementById('scientific-calculator');
            
            // Update active button
            modeButtons.forEach(btn => btn.classList.remove('active'));
            this.classList.add('active');
            
            // Show/hide calculators
            if (mode === 'basic') {
                basicCalc.style.display = 'grid';
                scientificCalc.style.display = 'none';
            } else {
                basicCalc.style.display = 'none';
                scientificCalc.style.display = 'grid';
            }
        });
    });
    
    // Override the basic calculator menu items
    const basicCalculatorButtons = document.querySelectorAll('.menu-card[data-operation="basic"], .menu-item[data-operation="basic"]');
    
    basicCalculatorButtons.forEach(button => {
        button.addEventListener('click', function(e) {
            e.preventDefault();
            e.stopPropagation();
            calculator.show();
        });
    });
});

// Add CSS for the simple calculator popup
const simpleCalculatorCSS = `
    .simple-calculator-popup {
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        width: 95%;
        max-width: 400px;
        background: var(--card-bg);
        border-radius: 20px;
        padding: 20px;
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.5);
        border: 1px solid var(--card-border);
        z-index: 1001;
        display: none;
    }
    
    .simple-calculator-popup.active {
        display: block;
    }
    
    .simple-calculator-container {
        display: flex;
        flex-direction: column;
        gap: 15px;
    }
    
    .simple-calculator-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 10px;
    }
    
    .simple-calculator-title {
        font-size: 1.5rem;
        color: var(--accent);
        font-weight: 600;
    }
    
    .close-simple-calculator {
        background: none;
        border: none;
        color: white;
        font-size: 1.5rem;
        cursor: pointer;
        width: 40px;
        height: 40px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        transition: background 0.3s ease;
    }
    
    .close-simple-calculator:hover {
        background: rgba(255, 255, 255, 0.1);
    }
    
    .calculator-mode-toggle {
        display: flex;
        margin-bottom: 10px;
        border-radius: 10px;
        overflow: hidden;
        background: rgba(255, 255, 255, 0.1);
        border: 1px solid var(--card-border);
    }
    
    .mode-btn {
        flex: 1;
        padding: 10px;
        background: transparent;
        border: none;
        color: white;
        cursor: pointer;
        transition: all 0.3s ease;
        font-weight: 600;
        font-size: 0.9rem;
    }
    
    .mode-btn.active {
        background: var(--primary);
    }
    
    .mode-btn:hover:not(.active) {
        background: rgba(255, 255, 255, 0.1);
    }
    
    .simple-calculator-display {
        background: rgba(0, 0, 0, 0.3);
        border-radius: 10px;
        padding: 15px;
        text-align: right;
        border: 1px solid rgba(255, 255, 255, 0.1);
        min-height: 80px;
        display: flex;
        flex-direction: column;
        justify-content: center;
    }
    
    .simple-formula-bar {
        font-size: 1.2rem;
        color: rgba(255, 255, 255, 0.7);
        min-height: 25px;
        margin-bottom: 5px;
        font-family: 'Courier New', monospace;
        word-wrap: break-word;
    }
    
    .simple-result-display {
        font-size: 1.8rem;
        font-weight: bold;
        color: white;
        min-height: 35px;
        font-family: 'Courier New', monospace;
        word-wrap: break-word;
    }
    
    .simple-calculator-controls,
    .scientific-calculator-controls {
        display: grid;
        grid-template-columns: repeat(4, 1fr);
        gap: 8px;
        margin-bottom: 15px;
    }
    
    .simple-calc-btn {
        padding: 15px 5px;
        border: none;
        border-radius: 8px;
        font-size: 1.1rem;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s ease;
        color: white;
        min-height: 50px;
    }
    
    .simple-calc-btn.number {
        background: rgba(255, 255, 255, 0.1);
    }
    
    .simple-calc-btn.number:hover {
        background: rgba(255, 255, 255, 0.2);
    }
    
    .simple-calc-btn.operator {
        background: rgba(37, 117, 252, 0.3);
    }
    
    .simple-calc-btn.operator:hover {
        background: rgba(37, 117, 252, 0.5);
    }
    
    .simple-calc-btn.scientific-btn {
        background: rgba(106, 17, 203, 0.3);
        font-size: 0.9rem;
    }
    
    .simple-calc-btn.scientific-btn:hover {
        background: rgba(106, 17, 203, 0.5);
    }
    
    .simple-calc-btn.equals {
        background: linear-gradient(to right, var(--primary), var(--secondary));
    }
    
    .simple-calc-btn.equals:hover {
        filter: brightness(1.2);
    }
    
    .simple-calc-btn.clear {
        background: rgba(255, 68, 68, 0.7);
    }
    
    .simple-calc-btn.clear:hover {
        background: rgba(255, 68, 68, 0.9);
    }
    
    .simple-calc-btn.backspace {
        background: rgba(255, 187, 51, 0.7);
    }
    
    .simple-calc-btn.backspace:hover {
        background: rgba(255, 187, 51, 0.9);
    }
    
    .simple-calc-btn.zero {
        grid-column: span 2;
    }
    
    .simple-calculator-footer {
        display: flex;
        justify-content: center;
    }
    
    .back-to-main-btn {
        background: rgba(255, 255, 255, 0.1);
        border: none;
        color: white;
        padding: 12px 20px;
        border-radius: 10px;
        cursor: pointer;
        display: flex;
        align-items: center;
        gap: 8px;
        transition: all 0.3s ease;
        font-size: 0.9rem;
    }
    
    .back-to-main-btn:hover {
        background: rgba(255, 255, 255, 0.2);
    }
    
    @media (max-width: 480px) {
        .simple-calculator-popup {
            width: 98%;
            padding: 15px;
        }
        
        .simple-calc-btn {
            padding: 12px 3px;
            font-size: 1rem;
            min-height: 45px;
        }
        
        .simple-calc-btn.scientific-btn {
            font-size: 0.8rem;
        }
    }
`;

// Add the CSS to the document
const style = document.createElement('style');
style.textContent = simpleCalculatorCSS;
document.head.appendChild(style);
        
    </script>
    
    
    
    
    <script>
// Enhanced Calculus Module with Real Mathematical Computation
function initializeEnhancedCalculus() {
    const calculusOperation = document.getElementById('calculus-operation');
    const calculusExpressionInput = document.getElementById('calculus-expression');
    const calculusSolveBtn = document.getElementById('calculus-solve-btn');
    const calculusClearBtn = document.getElementById('calculus-clear-btn');
    const calculusResultDisplay = document.getElementById('calculus-result-display');
    
    // Variable input for differentiation and integration
    const variableInput = document.createElement('input');
    variableInput.type = 'text';
    variableInput.className = 'input-field';
    variableInput.id = 'calculus-variable';
    variableInput.placeholder = 'Variable (default: x)';
    variableInput.value = 'x';
    
    // Limit point input for limit calculations
    const limitPointInput = document.createElement('input');
    limitPointInput.type = 'text';
    limitPointInput.className = 'input-field';
    limitPointInput.id = 'calculus-limit-point';
    limitPointInput.placeholder = 'Limit point (e.g., 0, infinity)';
    limitPointInput.value = '0';
    
    // Insert the new inputs
    const inputArea = calculusExpressionInput.parentElement;
    inputArea.appendChild(variableInput);
    inputArea.appendChild(limitPointInput);
    
    // Show/hide inputs based on operation
    function updateInputVisibility() {
        const operation = calculusOperation.value;
        
        if (operation === 'limit') {
            limitPointInput.style.display = 'block';
            variableInput.style.display = 'block';
        } else if (operation === 'differentiate' || operation === 'integrate') {
            limitPointInput.style.display = 'none';
            variableInput.style.display = 'block';
        } else {
            limitPointInput.style.display = 'none';
            variableInput.style.display = 'none';
        }
    }
    
    // Initialize visibility
    updateInputVisibility();
    
    // Update visibility when operation changes
    calculusOperation.addEventListener('change', updateInputVisibility);
    
    // Enhanced calculus solver
    calculusSolveBtn.addEventListener('click', function() {
        const operation = calculusOperation.value;
        const expression = calculusExpressionInput.value.trim();
        const variable = variableInput.value.trim() || 'x';
        const limitPoint = limitPointInput.value.trim();
        
        if (!expression) {
            calculusResultDisplay.innerHTML = '<p style="color: var(--danger);">Please enter an expression.</p>';
            return;
        }
        
        try {
            let result = '';
            
            switch (operation) {
                case 'differentiate':
                    result = differentiateExpression(expression, variable);
                    calculusResultDisplay.innerHTML = `
                        <p><strong>Function:</strong> ${expression}</p>
                        <p><strong>Variable:</strong> ${variable}</p>
                        <p><strong>Derivative:</strong> ${result}</p>
                    `;
                    break;
                    
                case 'integrate':
                    result = integrateExpression(expression, variable);
                    calculusResultDisplay.innerHTML = `
                        <p><strong>Function:</strong> ${expression}</p>
                        <p><strong>Variable:</strong> ${variable}</p>
                        <p><strong>Integral:</strong> ${result}</p>
                    `;
                    break;
                    
                case 'limit':
                    result = calculateLimit(expression, variable, limitPoint);
                    calculusResultDisplay.innerHTML = `
                        <p><strong>Function:</strong> ${expression}</p>
                        <p><strong>Variable:</strong> ${variable}</p>
                        <p><strong>Limit point:</strong> ${limitPoint}</p>
                        <p><strong>Limit:</strong> ${result}</p>
                    `;
                    break;
            }
        } catch (error) {
            calculusResultDisplay.innerHTML = `<p style="color: var(--danger);">Error: ${error.message}</p>`;
        }
    });
    
    // Clear button
    calculusClearBtn.addEventListener('click', function() {
        calculusExpressionInput.value = '';
        variableInput.value = 'x';
        limitPointInput.value = '0';
        calculusResultDisplay.innerHTML = '<p>Select operation and enter expression.</p>';
    });
}

// Enhanced differentiation function
function differentiateExpression(expression, variable) {
    try {
        // Use math.js to parse and differentiate
        const node = math.parse(expression);
        const derivative = math.derivative(node, variable);
        
        // Simplify the result
        const simplified = math.simplify(derivative);
        
        return simplified.toString();
    } catch (error) {
        // Fallback to numerical differentiation for complex expressions
        return numericalDifferentiation(expression, variable);
    }
}

// Numerical differentiation as fallback
function numericalDifferentiation(expression, variable, h = 0.0001) {
    try {
        // Create a scope with the variable
        const scope = {};
        scope[variable] = 1; // Use 1 as a sample point
        
        // Evaluate function at point
        const f1 = evaluateExpression(expression, scope);
        
        // Evaluate function at point + h
        scope[variable] = 1 + h;
        const f2 = evaluateExpression(expression, scope);
        
        // Calculate derivative using finite difference
        const derivative = (f2 - f1) / h;
        
        return `Numerical derivative at ${variable}=1: ${derivative.toFixed(6)}`;
    } catch (error) {
        throw new Error(`Could not differentiate expression: ${expression}`);
    }
}

// Enhanced integration function
function integrateExpression(expression, variable) {
    try {
        // Use math.js to parse and integrate
        const node = math.parse(expression);
        
        // For definite integration, we would need bounds
        // For indefinite integration, we return the antiderivative
        const antiderivative = integrateByRules(expression, variable);
        
        return antiderivative + " + C";
    } catch (error) {
        // Fallback to numerical integration
        return numericalIntegration(expression, variable);
    }
}

// Rule-based integration for common functions
function integrateByRules(expression, variable) {
    // Handle power functions: ∫x^n dx = x^(n+1)/(n+1)
    const powerMatch = expression.match(new RegExp(`${variable}\\^(\\d+)`));
    if (powerMatch) {
        const n = parseInt(powerMatch[1]);
        if (n !== -1) {
            return `${variable}^${n+1}/${n+1}`;
        } else {
            return `ln|${variable}|`;
        }
    }
    
    // Handle exponential functions
    if (expression === `e^${variable}`) {
        return `e^${variable}`;
    }
    
    // Handle trigonometric functions
    if (expression === `sin(${variable})`) {
        return `-cos(${variable})`;
    }
    if (expression === `cos(${variable})`) {
        return `sin(${variable})`;
    }
    if (expression === `sec(${variable})^2` || expression === `sec^2(${variable})`) {
        return `tan(${variable})`;
    }
    
    // If no rule matches, use numerical integration
    return numericalIntegration(expression, variable);
}

// Numerical integration as fallback
function numericalIntegration(expression, variable, a = 0, b = 1) {
    try {
        // Use Simpson's rule for numerical integration
        const n = 100; // Number of intervals
        const h = (b - a) / n;
        
        let sum = 0;
        
        // Create scope for evaluation
        const scope = {};
        
        // Evaluate at endpoints
        scope[variable] = a;
        const fa = evaluateExpression(expression, scope);
        
        scope[variable] = b;
        const fb = evaluateExpression(expression, scope);
        
        sum = fa + fb;
        
        // Evaluate at interior points
        for (let i = 1; i < n; i++) {
            scope[variable] = a + i * h;
            const fi = evaluateExpression(expression, scope);
            
            if (i % 2 === 0) {
                sum += 2 * fi;
            } else {
                sum += 4 * fi;
            }
        }
        
        const integral = (h / 3) * sum;
        
        return `Numerical integral from ${variable}=${a} to ${variable}=${b}: ${integral.toFixed(6)}`;
    } catch (error) {
        throw new Error(`Could not integrate expression: ${expression}`);
    }
}

// Enhanced limit calculation
function calculateLimit(expression, variable, limitPoint) {
    try {
        // Handle special cases
        if (limitPoint.toLowerCase() === 'infinity' || limitPoint === '∞') {
            return calculateLimitAtInfinity(expression, variable);
        }
        
        if (limitPoint.toLowerCase() === '-infinity' || limitPoint === '-∞') {
            return calculateLimitAtNegativeInfinity(expression, variable);
        }
        
        // Parse the limit point
        const point = parseFloat(limitPoint);
        
        if (isNaN(point)) {
            throw new Error(`Invalid limit point: ${limitPoint}`);
        }
        
        // Try direct substitution first
        try {
            const scope = {};
            scope[variable] = point;
            const directValue = evaluateExpression(expression, scope);
            
            if (!isNaN(directValue) && isFinite(directValue)) {
                return directValue.toString();
            }
        } catch (e) {
            // Direct substitution failed, try other methods
        }
        
        // Try approaching from left and right
        const leftLimit = approachLimit(expression, variable, point, -0.0001);
        const rightLimit = approachLimit(expression, variable, point, 0.0001);
        
        // Check if limits from both sides are equal
        if (Math.abs(leftLimit - rightLimit) < 0.001) {
            return leftLimit.toFixed(6);
        } else {
            return `Limit does not exist (left: ${leftLimit.toFixed(6)}, right: ${rightLimit.toFixed(6)})`;
        }
    } catch (error) {
        throw new Error(`Could not calculate limit: ${error.message}`);
    }
}

// Calculate limit at infinity
function calculateLimitAtInfinity(expression, variable) {
    // For large values of x
    const largeValue = 1000000;
    
    const scope = {};
    scope[variable] = largeValue;
    
    try {
        const value = evaluateExpression(expression, scope);
        
        if (Math.abs(value) > 1e10) {
            return value > 0 ? '∞' : '-∞';
        }
        
        return value.toFixed(6);
    } catch (error) {
        return 'Cannot determine limit at infinity';
    }
}

// Calculate limit at negative infinity
function calculateLimitAtNegativeInfinity(expression, variable) {
    // For large negative values of x
    const largeNegativeValue = -1000000;
    
    const scope = {};
    scope[variable] = largeNegativeValue;
    
    try {
        const value = evaluateExpression(expression, scope);
        
        if (Math.abs(value) > 1e10) {
            return value > 0 ? '∞' : '-∞';
        }
        
        return value.toFixed(6);
    } catch (error) {
        return 'Cannot determine limit at negative infinity';
    }
}

// Approach limit from a specific direction
function approachLimit(expression, variable, point, delta) {
    const scope = {};
    scope[variable] = point + delta;
    
    return evaluateExpression(expression, scope);
}

// Safe expression evaluation
function evaluateExpression(expression, scope) {
    try {
        // Use math.js to evaluate the expression
        return math.evaluate(expression, scope);
    } catch (error) {
        throw new Error(`Invalid expression: ${expression}`);
    }
}

// Enhanced Algebraic Equations Solver
function initializeEnhancedAlgebraicEquations() {
    const algebraType = document.getElementById('algebra-type');
    const algebraInputArea = document.getElementById('algebra-input-area');
    const algebraSolveBtn = document.getElementById('algebra-solve-btn');
    const algebraClearBtn = document.getElementById('algebra-clear-btn');
    const algebraResultDisplay = document.getElementById('algebra-result-display');
    
    // Create input fields based on equation type
    function createAlgebraInputs() {
        const type = algebraType.value;
        let html = '';
        
        switch (type) {
            case 'linear':
                html = `
                    <input type="text" class="input-field" id="linear-a" placeholder="Coefficient a (e.g., 2)">
                    <input type="text" class="input-field" id="linear-b" placeholder="Coefficient b (e.g., 5)">
                    <input type="text" class="input-field" id="linear-c" placeholder="Constant c (e.g., 13)">
                    <p>Equation: ax + b = c</p>
                `;
                break;
            case 'quadratic':
                html = `
                    <input type="text" class="input-field" id="quad-a" placeholder="Coefficient a (e.g., 1)">
                    <input type="text" class="input-field" id="quad-b" placeholder="Coefficient b (e.g., -3)">
                    <input type="text" class="input-field" id="quad-c" placeholder="Coefficient c (e.g., 2)">
                    <p>Equation: ax² + bx + c = 0</p>
                `;
                break;
            case 'cubic':
                html = `
                    <input type="text" class="input-field" id="cubic-a" placeholder="Coefficient a (e.g., 1)">
                    <input type="text" class="input-field" id="cubic-b" placeholder="Coefficient b (e.g., -6)">
                    <input type="text" class="input-field" id="cubic-c" placeholder="Coefficient c (e.g., 11)">
                    <input type="text" class="input-field" id="cubic-d" placeholder="Coefficient d (e.g., -6)">
                    <p>Equation: ax³ + bx² + cx + d = 0</p>
                `;
                break;
            case 'exponential':
                html = `
                    <input type="text" class="input-field" id="exp-a" placeholder="Base (e.g., 2)">
                    <input type="text" class="input-field" id="exp-b" placeholder="Exponent coefficient (e.g., 1)">
                    <input type="text" class="input-field" id="exp-c" placeholder="Constant (e.g., 8)">
                    <p>Equation: a^(bx) = c</p>
                `;
                break;
            case 'logarithmic':
                html = `
                    <input type="text" class="input-field" id="log-a" placeholder="Base (e.g., 10)">
                    <input type="text" class="input-field" id="log-b" placeholder="Argument (e.g., x)">
                    <input type="text" class="input-field" id="log-c" placeholder="Value (e.g., 2)">
                    <p>Equation: logₐ(b) = c</p>
                `;
                break;
        }
        
        algebraInputArea.innerHTML = html;
    }
    
    // Initialize inputs
    createAlgebraInputs();
    
    // Update inputs when type changes
    algebraType.addEventListener('change', createAlgebraInputs);
    
    // Solve equation
    algebraSolveBtn.addEventListener('click', function() {
        const type = algebraType.value;
        let result = '';
        
        try {
            switch (type) {
                case 'linear':
                    const a = parseFloat(document.getElementById('linear-a').value);
                    const b = parseFloat(document.getElementById('linear-b').value);
                    const c = parseFloat(document.getElementById('linear-c').value);
                    
                    if (isNaN(a) || isNaN(b) || isNaN(c)) {
                        throw new Error('Please enter valid numbers');
                    }
                    
                    if (a === 0) {
                        if (b === c) {
                            result = 'Infinite solutions (identity)';
                        } else {
                            result = 'No solution (contradiction)';
                        }
                    } else {
                        const x = (c - b) / a;
                        result = `Solution: x = ${x}`;
                    }
                    break;
                    
                case 'quadratic':
                    const quadA = parseFloat(document.getElementById('quad-a').value);
                    const quadB = parseFloat(document.getElementById('quad-b').value);
                    const quadC = parseFloat(document.getElementById('quad-c').value);
                    
                    if (isNaN(quadA) || isNaN(quadB) || isNaN(quadC)) {
                        throw new Error('Please enter valid numbers');
                    }
                    
                    if (quadA === 0) {
                        throw new Error('This is not a quadratic equation (a = 0)');
                    }
                    
                    const discriminant = quadB * quadB - 4 * quadA * quadC;
                    
                    if (discriminant > 0) {
                        const root1 = (-quadB + Math.sqrt(discriminant)) / (2 * quadA);
                        const root2 = (-quadB - Math.sqrt(discriminant)) / (2 * quadA);
                        result = `Real solutions: x = ${root1}, x = ${root2}`;
                    } else if (discriminant === 0) {
                        const root = -quadB / (2 * quadA);
                        result = `One real solution (double root): x = ${root}`;
                    } else {
                        const realPart = -quadB / (2 * quadA);
                        const imaginaryPart = Math.sqrt(-discriminant) / (2 * quadA);
                        result = `Complex solutions: x = ${realPart} ± ${imaginaryPart}i`;
                    }
                    break;
                    
                case 'cubic':
                    const cubicA = parseFloat(document.getElementById('cubic-a').value);
                    const cubicB = parseFloat(document.getElementById('cubic-b').value);
                    const cubicC = parseFloat(document.getElementById('cubic-c').value);
                    const cubicD = parseFloat(document.getElementById('cubic-d').value);
                    
                    if (isNaN(cubicA) || isNaN(cubicB) || isNaN(cubicC) || isNaN(cubicD)) {
                        throw new Error('Please enter valid numbers');
                    }
                    
                    if (cubicA === 0) {
                        throw new Error('This is not a cubic equation (a = 0)');
                    }
                    
                    // Use Cardano's formula for cubic equations
                    result = solveCubicEquation(cubicA, cubicB, cubicC, cubicD);
                    break;
                    
                case 'exponential':
                    const base = parseFloat(document.getElementById('exp-a').value);
                    const expCoeff = parseFloat(document.getElementById('exp-b').value);
                    const constant = parseFloat(document.getElementById('exp-c').value);
                    
                    if (isNaN(base) || isNaN(expCoeff) || isNaN(constant)) {
                        throw new Error('Please enter valid numbers');
                    }
                    
                    if (base <= 0 || base === 1) {
                        throw new Error('Base must be positive and not equal to 1');
                    }
                    
                    if (constant <= 0) {
                        throw new Error('Constant must be positive');
                    }
                    
                    const solution = Math.log(constant) / (Math.log(base) * expCoeff);
                    result = `Solution: x = ${solution}`;
                    break;
                    
                case 'logarithmic':
                    const logBase = parseFloat(document.getElementById('log-a').value);
                    const argument = document.getElementById('log-b').value;
                    const logValue = parseFloat(document.getElementById('log-c').value);
                    
                    if (isNaN(logBase) || isNaN(logValue)) {
                        throw new Error('Please enter valid numbers');
                    }
                    
                    if (logBase <= 0 || logBase === 1) {
                        throw new Error('Base must be positive and not equal to 1');
                    }
                    
                    if (argument === 'x') {
                        const xSolution = Math.pow(logBase, logValue);
                        result = `Solution: x = ${xSolution}`;
                    } else {
                        // Try to evaluate the argument
                        try {
                            const argValue = math.evaluate(argument);
                            const computedValue = Math.log(argValue) / Math.log(logBase);
                            
                            if (Math.abs(computedValue - logValue) < 0.0001) {
                                result = `The equation is satisfied for the given argument`;
                            } else {
                                result = `The equation is not satisfied for the given argument`;
                            }
                        } catch (e) {
                            result = 'Only equations with simple variable x are fully supported';
                        }
                    }
                    break;
            }
            
            algebraResultDisplay.innerHTML = `<p>${result}</p>`;
        } catch (error) {
            algebraResultDisplay.innerHTML = `<p style="color: var(--danger);">Error: ${error.message}</p>`;
        }
    });
    
    // Clear button
    algebraClearBtn.addEventListener('click', function() {
        createAlgebraInputs();
        algebraResultDisplay.innerHTML = '<p>Select equation type and enter values.</p>';
    });
}

// Solve cubic equation using Cardano's formula
function solveCubicEquation(a, b, c, d) {
    // Normalize coefficients
    const p = (3*a*c - b*b) / (3*a*a);
    const q = (2*b*b*b - 9*a*b*c + 27*a*a*d) / (27*a*a*a);
    
    const discriminant = (q*q/4) + (p*p*p/27);
    
    if (discriminant > 0) {
        // One real root, two complex roots
        const u = Math.cbrt(-q/2 + Math.sqrt(discriminant));
        const v = Math.cbrt(-q/2 - Math.sqrt(discriminant));
        
        const realRoot = u + v - b/(3*a);
        
        return `One real root: x = ${realRoot.toFixed(6)} (plus two complex roots)`;
    } else if (discriminant === 0) {
        // Three real roots, at least two equal
        const u = Math.cbrt(-q/2);
        const root1 = 2*u - b/(3*a);
        const root2 = -u - b/(3*a);
        
        if (Math.abs(root1 - root2) < 0.0001) {
            return `Triple root: x = ${root1.toFixed(6)}`;
        } else {
            return `One double root and one single root: x = ${root1.toFixed(6)} (double), x = ${root2.toFixed(6)}`;
        }
    } else {
        // Three distinct real roots
        const r = Math.sqrt(-p*p*p/27);
        const phi = Math.acos(-q/(2*r));
        
        const root1 = 2 * Math.cbrt(r) * Math.cos(phi/3) - b/(3*a);
        const root2 = 2 * Math.cbrt(r) * Math.cos((phi + 2*Math.PI)/3) - b/(3*a);
        const root3 = 2 * Math.cbrt(r) * Math.cos((phi + 4*Math.PI)/3) - b/(3*a);
        
        return `Three real roots: x = ${root1.toFixed(6)}, x = ${root2.toFixed(6)}, x = ${root3.toFixed(6)}`;
    }
}

// Enhanced Polynomial Equations Solver
function initializeEnhancedPolynomialEquations() {
    const polynomialDegree = document.getElementById('polynomial-degree');
    const polynomialInputArea = document.getElementById('polynomial-input-area');
    const polynomialSolveBtn = document.getElementById('polynomial-solve-btn');
    const polynomialClearBtn = document.getElementById('polynomial-clear-btn');
    const polynomialResultDisplay = document.getElementById('polynomial-result-display');
    
    // Create input fields based on polynomial degree
    function createPolynomialInputs() {
        const degree = parseInt(polynomialDegree.value);
        let html = '';
        
        for (let i = degree; i >= 0; i--) {
            html += `<input type="text" class="input-field" id="poly-${i}" placeholder="Coefficient for x^${i}" value="${i === degree ? '1' : '0'}">`;
        }
        
        html += `<p>Polynomial: a${degree}x^${degree} + a${degree-1}x^${degree-1} + ... + a₀ = 0</p>`;
        
        polynomialInputArea.innerHTML = html;
    }
    
    // Initialize inputs
    createPolynomialInputs();
    
    // Update inputs when degree changes
    polynomialDegree.addEventListener('change', createPolynomialInputs);
    
    // Solve polynomial
    polynomialSolveBtn.addEventListener('click', function() {
        const degree = parseInt(polynomialDegree.value);
        const coefficients = [];
        
        try {
            // Extract coefficients
            for (let i = degree; i >= 0; i--) {
                const coeff = parseFloat(document.getElementById(`poly-${i}`).value);
                if (isNaN(coeff)) {
                    throw new Error(`Invalid coefficient for x^${i}`);
                }
                coefficients.push(coeff);
            }
            
            // Reverse to have coefficients from highest to lowest degree
            coefficients.reverse();
            
            // Solve based on degree
            let roots = [];
            
            if (degree === 1) {
                // Linear equation
                const a = coefficients[1];
                const b = coefficients[0];
                
                if (a === 0) {
                    if (b === 0) {
                        roots.push('Infinite solutions');
                    } else {
                        roots.push('No solution');
                    }
                } else {
                    roots.push((-b / a).toFixed(6));
                }
            } else if (degree === 2) {
                // Quadratic equation
                const a = coefficients[2];
                const b = coefficients[1];
                const c = coefficients[0];
                
                if (a === 0) {
                    throw new Error('This is not a quadratic equation (leading coefficient is zero)');
                }
                
                const discriminant = b * b - 4 * a * c;
                
                if (discriminant > 0) {
                    const root1 = (-b + Math.sqrt(discriminant)) / (2 * a);
                    const root2 = (-b - Math.sqrt(discriminant)) / (2 * a);
                    roots.push(root1.toFixed(6), root2.toFixed(6));
                } else if (discriminant === 0) {
                    const root = -b / (2 * a);
                    roots.push(root.toFixed(6) + ' (double root)');
                } else {
                    const realPart = -b / (2 * a);
                    const imaginaryPart = Math.sqrt(-discriminant) / (2 * a);
                    roots.push(`${realPart.toFixed(6)} + ${imaginaryPart.toFixed(6)}i`);
                    roots.push(`${realPart.toFixed(6)} - ${imaginaryPart.toFixed(6)}i`);
                }
            } else {
                // Higher degree polynomials - use numerical methods
                roots = findPolynomialRoots(coefficients);
            }
            
            if (roots.length === 0) {
                polynomialResultDisplay.innerHTML = '<p>No real roots found</p>';
            } else {
                let resultHTML = '<p><strong>Roots:</strong></p><ul>';
                roots.forEach(root => {
                    resultHTML += `<li>x = ${root}</li>`;
                });
                resultHTML += '</ul>';
                
                polynomialResultDisplay.innerHTML = resultHTML;
            }
        } catch (error) {
            polynomialResultDisplay.innerHTML = `<p style="color: var(--danger);">Error: ${error.message}</p>`;
        }
    });
    
    // Clear button
    polynomialClearBtn.addEventListener('click', function() {
        createPolynomialInputs();
        polynomialResultDisplay.innerHTML = '<p>Select polynomial degree and enter coefficients.</p>';
    });
}

// Find roots of polynomial using numerical methods
function findPolynomialRoots(coefficients, maxIterations = 1000, tolerance = 1e-10) {
    const roots = [];
    const degree = coefficients.length - 1;
    
    // Make a copy of coefficients to work with
    let currentCoefficients = [...coefficients];
    
    for (let i = 0; i < degree; i++) {
        // Use Newton's method to find a root
        let x = Math.random() * 10 - 5; // Random initial guess
        
        for (let iter = 0; iter < maxIterations; iter++) {
            const fx = evaluatePolynomial(currentCoefficients, x);
            const fpx = evaluatePolynomialDerivative(currentCoefficients, x);
            
            if (Math.abs(fpx) < tolerance) {
                // Derivative is too small, try a different initial guess
                x = Math.random() * 10 - 5;
                continue;
            }
            
            const xNew = x - fx / fpx;
            
            if (Math.abs(xNew - x) < tolerance) {
                // Check if this root is distinct from previously found roots
                let isDistinct = true;
                for (const root of roots) {
                    if (Math.abs(parseFloat(root) - xNew) < tolerance) {
                        isDistinct = false;
                        break;
                    }
                }
                
                if (isDistinct) {
                    roots.push(xNew.toFixed(6));
                    
                    // Perform polynomial deflation
                    currentCoefficients = deflatePolynomial(currentCoefficients, xNew);
                }
                
                break;
            }
            
            x = xNew;
        }
    }
    
    return roots;
}

// Evaluate polynomial at x
function evaluatePolynomial(coefficients, x) {
    let result = 0;
    for (let i = 0; i < coefficients.length; i++) {
        result += coefficients[i] * Math.pow(x, coefficients.length - 1 - i);
    }
    return result;
}

// Evaluate derivative of polynomial at x
function evaluatePolynomialDerivative(coefficients, x) {
    let result = 0;
    for (let i = 0; i < coefficients.length - 1; i++) {
        const power = coefficients.length - 1 - i;
        result += coefficients[i] * power * Math.pow(x, power - 1);
    }
    return result;
}

// Deflate polynomial by removing a root
function deflatePolynomial(coefficients, root) {
    const newCoefficients = [coefficients[0]];
    
    for (let i = 1; i < coefficients.length - 1; i++) {
        newCoefficients.push(coefficients[i] + root * newCoefficients[i - 1]);
    }
    
    return newCoefficients;
}

// Replace the existing initialization functions with enhanced versions
function initializeAllEnhancedOperations() {
    // Replace the calculus initialization
    initializeEnhancedCalculus();
    
    // Replace the algebraic equations initialization
    initializeEnhancedAlgebraicEquations();
    
    // Replace the polynomial equations initialization
    initializeEnhancedPolynomialEquations();
    
    // Keep the existing implementations for other operations
    initializeBasicCalculator();
    initializeEquationSystems();
    initializeMatrixOperations();
}

// Call this function after DOM is loaded
document.addEventListener('DOMContentLoaded', function() {
    // Wait a bit for the original initialization to complete
    setTimeout(initializeAllEnhancedOperations, 100);
});
</script>

<style>
/* Additional styles for enhanced UI */
.input-field {
    margin-bottom: 10px;
}

.result-display ul {
    text-align: left;
    margin-left: 20px;
}

.result-display li {
    margin-bottom: 5px;
    font-family: 'Courier New', monospace;
}
</style>
    
    
    
    
    
    <style>
/* ADD THESE STYLES TO YOUR EXISTING CSS */
.matrix-row {
    flex-wrap: wrap !important;
    justify-content: center !important;
    gap: 5px !important;
}

.matrix-cell {
    max-width: 60px !important;
    min-width: 40px !important;
    flex: 1 !important;
}

.equation-row {
    flex-wrap: wrap !important;
    gap: 5px !important;
    justify-content: center !important;
}

.equation-input-field {
    max-width: 80px !important;
    min-width: 50px !important;
    flex: 1 !important;
}

.calculator-grid {
    grid-template-columns: repeat(auto-fit, minmax(50px, 1fr)) !important;
    gap: 5px !important;
}

/* Ensure all containers respect screen boundaries */
.operation-screen, .calculator-display, .matrix-section {
    max-width: 100vw !important;
    overflow-x: hidden !important;
    box-sizing: border-box !important;
}

/* Mobile-specific fixes */
@media (max-width: 768px) {
    .matrix-row {
        gap: 3px !important;
    }
    
    .matrix-cell {
        max-width: 50px !important;
        min-width: 35px !important;
        padding: 6px !important;
        font-size: 0.9rem !important;
    }
    
    .equation-row {
        gap: 3px !important;
    }
    
    .equation-input-field {
        max-width: 60px !important;
        min-width: 40px !important;
        padding: 8px !important;
        font-size: 0.9rem !important;
    }
    
    .calculator-grid {
        grid-template-columns: repeat(auto-fit, minmax(45px, 1fr)) !important;
        gap: 3px !important;
    }
    
    .calc-key {
        padding: 12px 0 !important;
        font-size: 1rem !important;
    }
}

@media (max-width: 480px) {
    .matrix-cell {
        max-width: 40px !important;
        min-width: 30px !important;
        padding: 4px !important;
        font-size: 0.8rem !important;
    }
    
    .equation-input-field {
        max-width: 50px !important;
        min-width: 35px !important;
        padding: 6px !important;
        font-size: 0.8rem !important;
    }
    
    .calculator-grid {
        grid-template-columns: repeat(auto-fit, minmax(40px, 1fr)) !important;
    }
    
    .calc-key {
        padding: 10px 0 !important;
        font-size: 0.9rem !important;
    }
}
</style>



</body>
</html>
